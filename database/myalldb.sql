-- phpMyAdmin SQL Dump
-- version 4.5.1
-- http://www.phpmyadmin.net
--
-- Host: localhost
-- Generation Time: 2017-09-11 17:24:41
-- 服务器版本： 10.1.16-MariaDB
-- PHP Version: 5.6.24

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `myalldb`
--

-- --------------------------------------------------------

--
-- 表的结构 `admins`
--

CREATE TABLE `admins` (
  `id` int(10) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `password` varchar(60) COLLATE utf8_unicode_ci NOT NULL,
  `remember_token` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- 转存表中的数据 `admins`
--

INSERT INTO `admins` (`id`, `name`, `email`, `password`, `remember_token`, `created_at`, `updated_at`) VALUES
(1, 'AdminFanren', 'fanrenroot@admin.com', '$2y$10$gyBKLgwnzKSdc.4dqrn2A.I1Ydtxo9D6Y5PR7AepDfqzP5D/gtzrG', 'wHKy73gpR1QkjQh478CRmoG7NJesUB0XEh1SPO7YcpvE9DxY2NN3agoRnbp2', '2017-08-12 22:31:29', '2017-08-25 09:01:32');

-- --------------------------------------------------------

--
-- 表的结构 `articles`
--

CREATE TABLE `articles` (
  `id` int(10) UNSIGNED NOT NULL,
  `category_id` int(10) UNSIGNED NOT NULL,
  `slug` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `title` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `subtitle` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `content` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `page_image` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `meta_description` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `is_original` tinyint(1) DEFAULT '0' COMMENT '是否原创',
  `is_draft` tinyint(1) DEFAULT '0',
  `view_count` int(10) UNSIGNED NOT NULL DEFAULT '0',
  `published_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- 转存表中的数据 `articles`
--

INSERT INTO `articles` (`id`, `category_id`, `slug`, `title`, `subtitle`, `content`, `page_image`, `meta_description`, `is_original`, `is_draft`, `view_count`, `published_at`, `created_at`, `updated_at`, `deleted_at`) VALUES
(1, 2, 'qing-qu-dian-shang-zhan-zhuan-qian-fang-fa-lun', '情趣电商站赚钱方法论', '对话春水堂，情趣电商站着把钱赚了的方法论 | iSeed，情趣电商还有出路么', '{"raw":"### 当春水堂不再只是卖成人用品 ###\\r\\n\\r\\n * ——虽然蔺德刚更喜欢用“性玩具”来指代这个词——那么它到底是想成为什么？\\r\\n\\r\\n * 此前，“春叔”对腾讯科技说，春水堂未来是希望“成为两性以及情侣关系的私人管家”。在接受爱范儿的采访时，他阐述更加清晰的进一步定位，春水堂“未来将从成人用品电商，转型为性健康产业的生态型公司。未来将介入到咨询领域，破除性观念上的认知和知识上的障碍，还可能会延展到药品领域等等。","html":"<h3>当春水堂不再只是卖成人用品</h3>\\n<ul>\\n<li>\\n<p>——虽然蔺德刚更喜欢用“性玩具”来指代这个词——那么它到底是想成为什么？</p>\\n</li>\\n<li>\\n<p>此前，“春叔”对腾讯科技说，春水堂未来是希望“成为两性以及情侣关系的私人管家”。在接受爱范儿的采访时，他阐述更加清晰的进一步定位，春水堂“未来将从成人用品电商，转型为性健康产业的生态型公司。未来将介入到咨询领域，破除性观念上的认知和知识上的障碍，还可能会延展到药品领域等等。</p>\\n</li>\\n</ul>\\n"}', '', '情趣电商', 1, 0, 0, '2017-08-29 17:21:00', '2017-08-29 16:31:17', '2017-08-31 09:41:11', NULL),
(2, 4, 'zi-xing-che-zhi-neng-hua-li-shi', '自行车智能化历史', '自行车都智能化了，你可知道它的历史？ ', '{"raw":"* 在不少旁观者的眼里，智能化几乎成了一种避之唯恐不及的“瘟疫”，开始攀附上大大小小、各式各样的工具和设备，从水杯、灯泡、体重秤这样的小物件，再到冰箱、洗衣机这些生活中的庞然大物。\\r\\n\\r\\n * 兜兜转转之后，这场“瘟疫”又找上了在生活中不那么起眼的自行车。然而，在搭上智能化的顺风车之前，你可知道自行车的历史？虽然，在乐视超级自行车的发布会上，它已经用了自行车史上有着重要地位的三个名字——斯塔利、西夫拉克、阿尔普迪埃——来命名自家的自行车，但那远远不够。Gizmodo 为我们梳理了自行车发展的关键节点。\\r\\n\\r\\n* 在开始之前，我们先来看看丹麦的设计师制作的动画，一分钟看完自行车近 200 年的演变。\\r\\n\\r\\n* 比较公认的说法是，第一辆自行车由法国手工艺人西夫拉克（Médé de Sivrac）设计，在两个轮子上安装了支架并配上马鞍，前进的话需要用脚蹬地提供动力。这还只是一个很简单的雏形，没有方向舵，转弯的时候需要骑行者下车抬起前轮，稳定性也不好。\\r\\n\\r\\n* 德国人杜莱斯（Karl Drais von Sauerbronn）制作了一辆和西夫拉克的设计相近的两轮车子，增加了车把，可以改变行进中的方向，速度可以达到 15km/h。不过，还是需要靠双脚蹬地提供动力。\\r\\n\\r\\n* 这时候第一辆真正意义上的自行车诞生了，是由苏格兰铁匠麦克米伦（Kirkpatrik Macmillan）设计的，它还有一个专门的名字——Velocipede。\\r\\n\\r\\n* 在不少旁观者的眼里，智能化几乎成了一种避之唯恐不及的“瘟疫”，开始攀附上大大小小、各式各样的工具和设备，从水杯、灯泡、体重秤这样的小物件，再到冰箱、洗衣机这些生活中的庞然大物。\\r\\n\\r\\n* 兜兜转转之后，这场“瘟疫”又找上了在生活中不那么起眼的自行车。然而，在搭上智能化的顺风车之前，你可知道自行车的历史？虽然，在乐视超级自行车的发布会上，它已经用了自行车史上有着重要地位的三个名字——斯塔利、西夫拉克、阿尔普迪埃——来命名自家的自行车，但那远远不够。Gizmodo 为我们梳理了自行车发展的关键节点。\\r\\n\\r\\n* 在开始之前，我们先来看看丹麦的设计师制作的动画，一分钟看完自行车近 200 年的演变。\\r\\n\\r\\n* 比较公认的说法是，第一辆自行车由法国手工艺人西夫拉克（Médé de Sivrac）设计，在两个轮子上安装了支架并配上马鞍，前进的话需要用脚蹬地提供动力。这还只是一个很简单的雏形，没有方向舵，转弯的时候需要骑行者下车抬起前轮，稳定性也不好。\\r\\n\\r\\n* 德国人杜莱斯（Karl Drais von Sauerbronn）制作了一辆和西夫拉克的设计相近的两轮车子，增加了车把，可以改变行进中的方向，速度可以达到 15km/h。不过，还是需要靠双脚蹬地提供动力。\\r\\n\\r\\n* 这时候第一辆真正意义上的自行车诞生了，是由苏格兰铁匠麦克米伦（Kirkpatrik Macmillan）设计的，它还有一个专门的名字——Velocipede。\\r\\n\\r\\n* 在不少旁观者的眼里，智能化几乎成了一种避之唯恐不及的“瘟疫”，开始攀附上大大小小、各式各样的工具和设备，从水杯、灯泡、体重秤这样的小物件，再到冰箱、洗衣机这些生活中的庞然大物。\\r\\n\\r\\n* 兜兜转转之后，这场“瘟疫”又找上了在生活中不那么起眼的自行车。然而，在搭上智能化的顺风车之前，你可知道自行车的历史？虽然，在乐视超级自行车的发布会上，它已经用了自行车史上有着重要地位的三个名字——斯塔利、西夫拉克、阿尔普迪埃——来命名自家的自行车，但那远远不够。Gizmodo 为我们梳理了自行车发展的关键节点。\\r\\n\\r\\n* 在开始之前，我们先来看看丹麦的设计师制作的动画，一分钟看完自行车近 200 年的演变。\\r\\n\\r\\n* 比较公认的说法是，第一辆自行车由法国手工艺人西夫拉克（Médé de Sivrac）设计，在两个轮子上安装了支架并配上马鞍，前进的话需要用脚蹬地提供动力。这还只是一个很简单的雏形，没有方向舵，转弯的时候需要骑行者下车抬起前轮，稳定性也不好。\\r\\n\\r\\n* 德国人杜莱斯（Karl Drais von Sauerbronn）制作了一辆和西夫拉克的设计相近的两轮车子，增加了车把，可以改变行进中的方向，速度可以达到 15km/h。不过，还是需要靠双脚蹬地提供动力。\\r\\n\\r\\n* 这时候第一辆真正意义上的自行车诞生了，是由苏格兰铁匠麦克米伦（Kirkpatrik Macmillan）设计的，它还有一个专门的名字——Velocipede。\\r\\n\\r\\n* 在不少旁观者的眼里，智能化几乎成了一种避之唯恐不及的“瘟疫”，开始攀附上大大小小、各式各样的工具和设备，从水杯、灯泡、体重秤这样的小物件，再到冰箱、洗衣机这些生活中的庞然大物。\\r\\n\\r\\n* 兜兜转转之后，这场“瘟疫”又找上了在生活中不那么起眼的自行车。然而，在搭上智能化的顺风车之前，你可知道自行车的历史？虽然，在乐视超级自行车的发布会上，它已经用了自行车史上有着重要地位的三个名字——斯塔利、西夫拉克、阿尔普迪埃——来命名自家的自行车，但那远远不够。Gizmodo 为我们梳理了自行车发展的关键节点。\\r\\n\\r\\n* 在开始之前，我们先来看看丹麦的设计师制作的动画，一分钟看完自行车近 200 年的演变。\\r\\n\\r\\n* 比较公认的说法是，第一辆自行车由法国手工艺人西夫拉克（Médé de Sivrac）设计，在两个轮子上安装了支架并配上马鞍，前进的话需要用脚蹬地提供动力。这还只是一个很简单的雏形，没有方向舵，转弯的时候需要骑行者下车抬起前轮，稳定性也不好。\\r\\n\\r\\n* 德国人杜莱斯（Karl Drais von Sauerbronn）制作了一辆和西夫拉克的设计相近的两轮车子，增加了车把，可以改变行进中的方向，速度可以达到 15km/h。不过，还是需要靠双脚蹬地提供动力。\\r\\n\\r\\n* 这时候第一辆真正意义上的自行车诞生了，是由苏格兰铁匠麦克米伦（Kirkpatrik Macmillan）设计的，它还有一个专门的名字——Velocipede。 ","html":"<ul>\\n<li>\\n<p>在不少旁观者的眼里，智能化几乎成了一种避之唯恐不及的“瘟疫”，开始攀附上大大小小、各式各样的工具和设备，从水杯、灯泡、体重秤这样的小物件，再到冰箱、洗衣机这些生活中的庞然大物。</p>\\n</li>\\n<li>\\n<p>兜兜转转之后，这场“瘟疫”又找上了在生活中不那么起眼的自行车。然而，在搭上智能化的顺风车之前，你可知道自行车的历史？虽然，在乐视超级自行车的发布会上，它已经用了自行车史上有着重要地位的三个名字——斯塔利、西夫拉克、阿尔普迪埃——来命名自家的自行车，但那远远不够。Gizmodo 为我们梳理了自行车发展的关键节点。</p>\\n</li>\\n<li>\\n<p>在开始之前，我们先来看看丹麦的设计师制作的动画，一分钟看完自行车近 200 年的演变。</p>\\n</li>\\n<li>\\n<p>比较公认的说法是，第一辆自行车由法国手工艺人西夫拉克（Médé de Sivrac）设计，在两个轮子上安装了支架并配上马鞍，前进的话需要用脚蹬地提供动力。这还只是一个很简单的雏形，没有方向舵，转弯的时候需要骑行者下车抬起前轮，稳定性也不好。</p>\\n</li>\\n<li>\\n<p>德国人杜莱斯（Karl Drais von Sauerbronn）制作了一辆和西夫拉克的设计相近的两轮车子，增加了车把，可以改变行进中的方向，速度可以达到 15km/h。不过，还是需要靠双脚蹬地提供动力。</p>\\n</li>\\n<li>\\n<p>这时候第一辆真正意义上的自行车诞生了，是由苏格兰铁匠麦克米伦（Kirkpatrik Macmillan）设计的，它还有一个专门的名字——Velocipede。</p>\\n</li>\\n<li>\\n<p>在不少旁观者的眼里，智能化几乎成了一种避之唯恐不及的“瘟疫”，开始攀附上大大小小、各式各样的工具和设备，从水杯、灯泡、体重秤这样的小物件，再到冰箱、洗衣机这些生活中的庞然大物。</p>\\n</li>\\n<li>\\n<p>兜兜转转之后，这场“瘟疫”又找上了在生活中不那么起眼的自行车。然而，在搭上智能化的顺风车之前，你可知道自行车的历史？虽然，在乐视超级自行车的发布会上，它已经用了自行车史上有着重要地位的三个名字——斯塔利、西夫拉克、阿尔普迪埃——来命名自家的自行车，但那远远不够。Gizmodo 为我们梳理了自行车发展的关键节点。</p>\\n</li>\\n<li>\\n<p>在开始之前，我们先来看看丹麦的设计师制作的动画，一分钟看完自行车近 200 年的演变。</p>\\n</li>\\n<li>\\n<p>比较公认的说法是，第一辆自行车由法国手工艺人西夫拉克（Médé de Sivrac）设计，在两个轮子上安装了支架并配上马鞍，前进的话需要用脚蹬地提供动力。这还只是一个很简单的雏形，没有方向舵，转弯的时候需要骑行者下车抬起前轮，稳定性也不好。</p>\\n</li>\\n<li>\\n<p>德国人杜莱斯（Karl Drais von Sauerbronn）制作了一辆和西夫拉克的设计相近的两轮车子，增加了车把，可以改变行进中的方向，速度可以达到 15km/h。不过，还是需要靠双脚蹬地提供动力。</p>\\n</li>\\n<li>\\n<p>这时候第一辆真正意义上的自行车诞生了，是由苏格兰铁匠麦克米伦（Kirkpatrik Macmillan）设计的，它还有一个专门的名字——Velocipede。</p>\\n</li>\\n<li>\\n<p>在不少旁观者的眼里，智能化几乎成了一种避之唯恐不及的“瘟疫”，开始攀附上大大小小、各式各样的工具和设备，从水杯、灯泡、体重秤这样的小物件，再到冰箱、洗衣机这些生活中的庞然大物。</p>\\n</li>\\n<li>\\n<p>兜兜转转之后，这场“瘟疫”又找上了在生活中不那么起眼的自行车。然而，在搭上智能化的顺风车之前，你可知道自行车的历史？虽然，在乐视超级自行车的发布会上，它已经用了自行车史上有着重要地位的三个名字——斯塔利、西夫拉克、阿尔普迪埃——来命名自家的自行车，但那远远不够。Gizmodo 为我们梳理了自行车发展的关键节点。</p>\\n</li>\\n<li>\\n<p>在开始之前，我们先来看看丹麦的设计师制作的动画，一分钟看完自行车近 200 年的演变。</p>\\n</li>\\n<li>\\n<p>比较公认的说法是，第一辆自行车由法国手工艺人西夫拉克（Médé de Sivrac）设计，在两个轮子上安装了支架并配上马鞍，前进的话需要用脚蹬地提供动力。这还只是一个很简单的雏形，没有方向舵，转弯的时候需要骑行者下车抬起前轮，稳定性也不好。</p>\\n</li>\\n<li>\\n<p>德国人杜莱斯（Karl Drais von Sauerbronn）制作了一辆和西夫拉克的设计相近的两轮车子，增加了车把，可以改变行进中的方向，速度可以达到 15km/h。不过，还是需要靠双脚蹬地提供动力。</p>\\n</li>\\n<li>\\n<p>这时候第一辆真正意义上的自行车诞生了，是由苏格兰铁匠麦克米伦（Kirkpatrik Macmillan）设计的，它还有一个专门的名字——Velocipede。</p>\\n</li>\\n<li>\\n<p>在不少旁观者的眼里，智能化几乎成了一种避之唯恐不及的“瘟疫”，开始攀附上大大小小、各式各样的工具和设备，从水杯、灯泡、体重秤这样的小物件，再到冰箱、洗衣机这些生活中的庞然大物。</p>\\n</li>\\n<li>\\n<p>兜兜转转之后，这场“瘟疫”又找上了在生活中不那么起眼的自行车。然而，在搭上智能化的顺风车之前，你可知道自行车的历史？虽然，在乐视超级自行车的发布会上，它已经用了自行车史上有着重要地位的三个名字——斯塔利、西夫拉克、阿尔普迪埃——来命名自家的自行车，但那远远不够。Gizmodo 为我们梳理了自行车发展的关键节点。</p>\\n</li>\\n<li>\\n<p>在开始之前，我们先来看看丹麦的设计师制作的动画，一分钟看完自行车近 200 年的演变。</p>\\n</li>\\n<li>\\n<p>比较公认的说法是，第一辆自行车由法国手工艺人西夫拉克（Médé de Sivrac）设计，在两个轮子上安装了支架并配上马鞍，前进的话需要用脚蹬地提供动力。这还只是一个很简单的雏形，没有方向舵，转弯的时候需要骑行者下车抬起前轮，稳定性也不好。</p>\\n</li>\\n<li>\\n<p>德国人杜莱斯（Karl Drais von Sauerbronn）制作了一辆和西夫拉克的设计相近的两轮车子，增加了车把，可以改变行进中的方向，速度可以达到 15km/h。不过，还是需要靠双脚蹬地提供动力。</p>\\n</li>\\n<li>\\n<p>这时候第一辆真正意义上的自行车诞生了，是由苏格兰铁匠麦克米伦（Kirkpatrik Macmillan）设计的，它还有一个专门的名字——Velocipede。</p>\\n</li>\\n</ul>\\n"}', '', '自行车智能化以及其历史', 1, 0, 0, '2017-08-29 18:00:00', '2017-08-29 17:23:44', '2017-08-31 09:40:29', NULL),
(11, 9, 'google-fa-bu-liao-xin-wan-yi-onhub', 'Google 发布了新玩意 OnHub', 'Google 发布了新玩意 OnHub，称只是想简简单单的', '{"raw":"* 前不久，苹果公司高级副总裁 Eddy Cue 还在宣称 Apple Music 试用期用户超 1100 万，最近就有一份来自 MusicWatch 的调查报告，让人大跌眼镜。\\r\\n\\r\\n* MusicWatch 针对美国 5000 名 13 岁以上人群进行抽样调查，得出数据：约有 77% 的 iOS 用户知道 Apple Music，只有 11% 的用户正在使用它；而在已经注册 Apple Music 三个月免费试用服务的用户中，48% 表示已经弃用，61% 称已关闭 iTunes 中的自动订阅功能。","html":"<ul>\\n<li>\\n<p>前不久，苹果公司高级副总裁 Eddy Cue 还在宣称 Apple Music 试用期用户超 1100 万，最近就有一份来自 MusicWatch 的调查报告，让人大跌眼镜。</p>\\n</li>\\n<li>\\n<p>MusicWatch 针对美国 5000 名 13 岁以上人群进行抽样调查，得出数据：约有 77% 的 iOS 用户知道 Apple Music，只有 11% 的用户正在使用它；而在已经注册 Apple Music 三个月免费试用服务的用户中，48% 表示已经弃用，61% 称已关闭 iTunes 中的自动订阅功能。</p>\\n</li>\\n</ul>\\n"}', '', 'google发布了新玩意 OnHub', 1, 0, 0, '2017-08-30 03:00:00', '2017-08-30 02:59:47', '2017-08-31 09:39:20', NULL),
(12, 8, 'php-zhong-wen-zhuan-pin-yin', 'PHP中文转拼音', '在laravel框架内中文转拼音，简繁体互转', '{"raw":"### Laravel框架拼音类，中文转拼音及拼音首字母，中文简繁体互转\\r\\n\\r\\n\\r\\n1. 在app文件夹下新建 `Services` 文件夹，同时新建一个拼音的服务类`PinYinService`，我喜欢将服务类文件放在该目录下\\r\\n  - 文件内容为：\\r\\n\\r\\n<code>\\r\\n\\r\\n    namespace App\\\\Services;\\r\\n\\r\\n    class PinYinService\\r\\n    {\\r\\n        static $data = [\\r\\n            array(''a'',-20319),array(''ai'',-20317),array(''an'',-20304),array(''ang'',-20295),array(''ao'',-20292),array(''ba'',-20283),\\r\\n            array(''bai'',-20265),array(''ban'',-20257),array(''bang'',-20242),array(''bao'',-20230),array(''bei'',-20051),array(''ben'',-20036),\\r\\n            array(''beng'',-20032),array(''bi'',-20026),array(''bian'',-20002),array(''biao'',-19990),array(''bie'',-19986),array(''bin'',-19982),\\r\\n            array(''bing'',-19976),array(''bo'',-19805),array(''bu'',-19784),array(''ca'',-19775),array(''cai'',-19774),array(''can'',-19763),\\r\\n            array(''cang'',-19756),array(''cao'',-19751),array(''ce'',-19746),array(''ceng'',-19741),array(''cha'',-19739),array(''chai'',-19728),\\r\\n            array(''chan'',-19725),array(''chang'',-19715),array(''chao'',-19540),array(''che'',-19531),array(''chen'',-19525),array(''cheng'',-19515),\\r\\n            array(''chi'',-19500),array(''chong'',-19484),array(''chou'',-19479),array(''chu'',-19467),array(''chuai'',-19289),array(''chuan'',-19288),\\r\\n            array(''chuang'',-19281),array(''chui'',-19275),array(''chun'',-19270),array(''chuo'',-19263),array(''ci'',-19261),array(''cong'',-19249),\\r\\n            array(''cou'',-19243),array(''cu'',-19242),array(''cuan'',-19238),array(''cui'',-19235),array(''cun'',-19227),array(''cuo'',-19224),\\r\\n            array(''da'',-19218),array(''dai'',-19212),array(''dan'',-19038),array(''dang'',-19023),array(''dao'',-19018),array(''de'',-19006),\\r\\n            array(''deng'',-19003),array(''di'',-18996),array(''dian'',-18977),array(''diao'',-18961),array(''die'',-18952),array(''ding'',-18783),\\r\\n            array(''diu'',-18774),array(''dong'',-18773),array(''dou'',-18763),array(''du'',-18756),array(''duan'',-18741),array(''dui'',-18735),\\r\\n            array(''dun'',-18731),array(''duo'',-18722),array(''e'',-18710),array(''en'',-18697),array(''er'',-18696),array(''fa'',-18526),\\r\\n            array(''fan'',-18518),array(''fang'',-18501),array(''fei'',-18490),array(''fen'',-18478),array(''feng'',-18463),array(''fo'',-18448),\\r\\n            array(''fou'',-18447),array(''fu'',-18446),array(''ga'',-18239),array(''gai'',-18237),array(''gan'',-18231),array(''gang'',-18220),\\r\\n            array(''gao'',-18211),array(''ge'',-18201),array(''gei'',-18184),array(''gen'',-18183),array(''geng'',-18181),array(''gong'',-18012),\\r\\n            array(''gou'',-17997),array(''gu'',-17988),array(''gua'',-17970),array(''guai'',-17964),array(''guan'',-17961),array(''guang'',-17950),\\r\\n            array(''gui'',-17947),array(''gun'',-17931),array(''guo'',-17928),array(''ha'',-17922),array(''hai'',-17759),array(''han'',-17752),\\r\\n            array(''hang'',-17733),array(''hao'',-17730),array(''he'',-17721),array(''hei'',-17703),array(''hen'',-17701),array(''heng'',-17697),\\r\\n            array(''hong'',-17692),array(''hou'',-17683),array(''hu'',-17676),array(''hua'',-17496),array(''huai'',-17487),array(''huan'',-17482),\\r\\n            array(''huang'',-17468),array(''hui'',-17454),array(''hun'',-17433),array(''huo'',-17427),array(''ji'',-17417),array(''jia'',-17202),\\r\\n            array(''jian'',-17185),array(''jiang'',-16983),array(''jiao'',-16970),array(''jie'',-16942),array(''jin'',-16915),array(''jing'',-16733),\\r\\n            array(''jiong'',-16708),array(''jiu'',-16706),array(''ju'',-16689),array(''juan'',-16664),array(''jue'',-16657),array(''jun'',-16647),\\r\\n            array(''ka'',-16474),array(''kai'',-16470),array(''kan'',-16465),array(''kang'',-16459),array(''kao'',-16452),array(''ke'',-16448),\\r\\n            array(''ken'',-16433),array(''keng'',-16429),array(''kong'',-16427),array(''kou'',-16423),array(''ku'',-16419),array(''kua'',-16412),\\r\\n            array(''kuai'',-16407),array(''kuan'',-16403),array(''kuang'',-16401),array(''kui'',-16393),array(''kun'',-16220),array(''kuo'',-16216),\\r\\n            array(''la'',-16212),array(''lai'',-16205),array(''lan'',-16202),array(''lang'',-16187),array(''lao'',-16180),array(''le'',-16171),\\r\\n            array(''lei'',-16169),array(''leng'',-16158),array(''li'',-16155),array(''lia'',-15959),array(''lian'',-15958),array(''liang'',-15944),\\r\\n            array(''liao'',-15933),array(''lie'',-15920),array(''lin'',-15915),array(''ling'',-15903),array(''liu'',-15889),array(''long'',-15878),\\r\\n            array(''lou'',-15707),array(''lu'',-15701),array(''lv'',-15681),array(''luan'',-15667),array(''lue'',-15661),array(''lun'',-15659),\\r\\n            array(''luo'',-15652),array(''ma'',-15640),array(''mai'',-15631),array(''man'',-15625),array(''mang'',-15454),array(''mao'',-15448),\\r\\n            array(''me'',-15436),array(''mei'',-15435),array(''men'',-15419),array(''meng'',-15416),array(''mi'',-15408),array(''mian'',-15394),\\r\\n            array(''miao'',-15385),array(''mie'',-15377),array(''min'',-15375),array(''ming'',-15369),array(''miu'',-15363),array(''mo'',-15362),\\r\\n            array(''mou'',-15183),array(''mu'',-15180),array(''na'',-15165),array(''nai'',-15158),array(''nan'',-15153),array(''nang'',-15150),\\r\\n            array(''nao'',-15149),array(''ne'',-15144),array(''nei'',-15143),array(''nen'',-15141),array(''neng'',-15140),array(''ni'',-15139),\\r\\n            array(''nian'',-15128),array(''niang'',-15121),array(''niao'',-15119),array(''nie'',-15117),array(''nin'',-15110),array(''ning'',-15109),\\r\\n            array(''niu'',-14941),array(''nong'',-14937),array(''nu'',-14933),array(''nv'',-14930),array(''nuan'',-14929),array(''nue'',-14928),\\r\\n            array(''nuo'',-14926),array(''o'',-14922),array(''ou'',-14921),array(''pa'',-14914),array(''pai'',-14908),array(''pan'',-14902),\\r\\n            array(''pang'',-14894),array(''pao'',-14889),array(''pei'',-14882),array(''pen'',-14873),array(''peng'',-14871),array(''pi'',-14857),\\r\\n            array(''pian'',-14678),array(''piao'',-14674),array(''pie'',-14670),array(''pin'',-14668),array(''ping'',-14663),array(''po'',-14654),\\r\\n            array(''pu'',-14645),array(''qi'',-14630),array(''qia'',-14594),array(''qian'',-14429),array(''qiang'',-14407),array(''qiao'',-14399),\\r\\n            array(''qie'',-14384),array(''qin'',-14379),array(''qing'',-14368),array(''qiong'',-14355),array(''qiu'',-14353),array(''qu'',-14345),\\r\\n            array(''quan'',-14170),array(''que'',-14159),array(''qun'',-14151),array(''ran'',-14149),array(''rang'',-14145),array(''rao'',-14140),\\r\\n            array(''re'',-14137),array(''ren'',-14135),array(''reng'',-14125),array(''ri'',-14123),array(''rong'',-14122),array(''rou'',-14112),\\r\\n            array(''ru'',-14109),array(''ruan'',-14099),array(''rui'',-14097),array(''run'',-14094),array(''ruo'',-14092),array(''sa'',-14090),\\r\\n            array(''sai'',-14087),array(''san'',-14083),array(''sang'',-13917),array(''sao'',-13914),array(''se'',-13910),array(''sen'',-13907),\\r\\n            array(''seng'',-13906),array(''sha'',-13905),array(''shai'',-13896),array(''shan'',-13894),array(''shang'',-13878),array(''shao'',-13870),\\r\\n            array(''she'',-13859),array(''shen'',-13847),array(''sheng'',-13831),array(''shi'',-13658),array(''shou'',-13611),array(''shu'',-13601),\\r\\n            array(''shua'',-13406),array(''shuai'',-13404),array(''shuan'',-13400),array(''shuang'',-13398),array(''shui'',-13395),\\r\\n            array(''shun'',-13391),array(''shuo'',-13387),array(''si'',-13383),array(''song'',-13367),array(''sou'',-13359),array(''su'',-13356),\\r\\n            array(''suan'',-13343),array(''sui'',-13340),array(''sun'',-13329),array(''suo'',-13326),array(''ta'',-13318),array(''tai'',-13147),\\r\\n            array(''tan'',-13138),array(''tang'',-13120),array(''tao'',-13107),array(''te'',-13096),array(''teng'',-13095),array(''ti'',-13091),\\r\\n            array(''tian'',-13076),array(''tiao'',-13068),array(''tie'',-13063),array(''ting'',-13060),array(''tong'',-12888),array(''tou'',-12875),\\r\\n            array(''tu'',-12871),array(''tuan'',-12860),array(''tui'',-12858),array(''tun'',-12852),array(''tuo'',-12849),array(''wa'',-12838),\\r\\n            array(''wai'',-12831),array(''wan'',-12829),array(''wang'',-12812),array(''wei'',-12802),array(''wen'',-12607),array(''weng'',-12597),\\r\\n            array(''wo'',-12594),array(''wu'',-12585),array(''xi'',-12556),array(''xia'',-12359),array(''xian'',-12346),array(''xiang'',-12320),\\r\\n            array(''xiao'',-12300),array(''xie'',-12120),array(''xin'',-12099),array(''xing'',-12089),array(''xiong'',-12074),array(''xiu'',-12067),\\r\\n            array(''xu'',-12058),array(''xuan'',-12039),array(''xue'',-11867),array(''xun'',-11861),array(''ya'',-11847),array(''yan'',-11831),\\r\\n            array(''yang'',-11798),array(''yao'',-11781),array(''ye'',-11604),array(''yi'',-11589),array(''yin'',-11536),array(''ying'',-11358),\\r\\n            array(''yo'',-11340),array(''yong'',-11339),array(''you'',-11324),array(''yu'',-11303),array(''yuan'',-11097),array(''yue'',-11077),\\r\\n            array(''yun'',-11067),array(''za'',-11055),array(''zai'',-11052),array(''zan'',-11045),array(''zang'',-11041),array(''zao'',-11038),\\r\\n            array(''ze'',-11024),array(''zei'',-11020),array(''zen'',-11019),array(''zeng'',-11018),array(''zha'',-11014),array(''zhai'',-10838),\\r\\n            array(''zhan'',-10832),array(''zhang'',-10815),array(''zhao'',-10800),array(''zhe'',-10790),array(''zhen'',-10780),array(''zheng'',-10764),\\r\\n            array(''zhi'',-10587),array(''zhong'',-10544),array(''zhou'',-10533),array(''zhu'',-10519),array(''zhua'',-10331),array(''zhuai'',-10329),\\r\\n            array(''zhuan'',-10328),array(''zhuang'',-10322),array(''zhui'',-10315),array(''zhun'',-10309),array(''zhuo'',-10307),array(''zi'',-10296),\\r\\n            array(''zong'',-10281),array(''zou'',-10274),array(''zu'',-10270),array(''zuan'',-10262),array(''zui'',-10260),array(''zun'',-10256),\\r\\n            array(''zuo'',-10254)\\r\\n        ];\\r\\n        //常用简体\\r\\n        private static $sd=\\"皑蔼碍爱翱袄奥坝罢摆败颁办绊帮绑镑谤剥饱宝报鲍辈贝钡狈备惫绷笔毕毙币闭边编贬变辩辫标鳖别瘪濒滨宾摈饼并拨钵铂驳卜补财参蚕残惭惨灿苍舱仓沧厕侧册测层诧搀掺蝉馋谗缠铲产阐颤场尝长偿肠厂畅钞车彻尘沉陈衬撑称惩诚骋痴迟驰耻齿炽冲虫宠畴踌筹绸丑橱厨锄雏础储触处传疮闯创锤纯绰辞词赐聪葱囱从丛凑蹿窜错达带贷担单郸掸胆惮诞弹当挡党荡档捣岛祷导盗灯邓敌涤递缔颠点垫电淀钓调迭谍叠钉顶锭订丢东动栋冻斗犊独读赌镀锻断缎兑队对吨顿钝夺堕鹅额讹恶饿儿尔饵贰发罚阀珐矾钒烦范贩饭访纺飞诽废费纷坟奋愤粪丰枫锋风疯冯缝讽凤肤辐抚辅赋复负讣妇缚该钙盖干赶秆赣冈刚钢纲岗皋镐搁鸽阁铬个给龚宫巩贡钩沟构购够蛊顾剐关观馆惯贯广规硅归龟闺轨诡柜贵刽辊滚锅国过骇韩汉号阂鹤贺横轰鸿红后壶护沪户哗华画划话怀坏欢环还缓换唤痪焕涣黄谎挥辉毁贿秽会烩汇讳诲绘荤浑伙获货祸击机积饥讥鸡绩缉极辑级挤几蓟剂济计记际继纪夹荚颊贾钾价驾歼监坚笺间艰缄茧检碱硷拣捡简俭减荐槛鉴践贱见键舰剑饯渐溅涧将浆蒋桨奖讲酱胶浇骄娇搅铰矫侥脚饺缴绞轿较秸阶节茎鲸惊经颈静镜径痉竞净纠厩旧驹举据锯惧剧鹃绢杰洁结诫届紧锦仅谨进晋烬尽劲荆觉决诀绝钧军骏开凯颗壳课垦恳抠库裤夸块侩宽矿旷况亏岿窥馈溃扩阔蜡腊莱来赖蓝栏拦篮阑兰澜谰揽览懒缆烂滥捞劳涝乐镭垒类泪篱离里鲤礼丽厉励砾历沥隶俩联莲连镰怜涟帘敛脸链恋炼练粮凉两辆谅疗辽镣猎临邻鳞凛赁龄铃凌灵岭领馏刘龙聋咙笼垄拢陇楼娄搂篓芦卢颅庐炉掳卤虏鲁赂禄录陆驴吕铝侣屡缕虑滤绿峦挛孪滦乱抡轮伦仑沦纶论萝罗逻锣箩骡骆络妈玛码蚂马骂吗买麦卖迈脉瞒馒蛮满谩猫锚铆贸么霉没镁门闷们锰梦谜弥觅幂绵缅庙灭悯闽鸣铭谬谋亩钠纳难挠脑恼闹馁内拟腻撵捻酿鸟聂啮镊镍柠狞宁拧泞钮纽脓浓农疟诺欧鸥殴呕沤盘庞赔喷鹏骗飘频贫苹凭评泼颇扑铺朴谱栖凄脐齐骑岂启气弃讫牵扦钎铅迁签谦钱钳潜浅谴堑枪呛墙蔷强抢锹桥乔侨翘窍窃钦亲寝轻氢倾顷请庆琼穷趋区躯驱龋颧权劝却鹊确让饶扰绕热韧认纫荣绒软锐闰润洒萨鳃赛叁伞丧骚扫涩杀纱筛晒删闪陕赡缮伤赏烧绍赊摄慑设绅审婶肾渗声绳胜圣师狮湿诗尸时蚀实识驶势适释饰视试寿兽枢输书赎属术树竖数帅双谁税顺说硕烁丝饲耸怂颂讼诵擞苏诉肃虽随绥岁孙损笋缩琐锁獭挞抬态摊贪瘫滩坛谭谈叹汤烫涛绦讨腾誊锑题体屉条贴铁厅听烃铜统头秃图涂团颓蜕脱鸵驮驼椭洼袜弯湾顽万网韦违围为潍维苇伟伪纬谓卫温闻纹稳问瓮挝蜗涡窝卧呜钨乌污诬无芜吴坞雾务误锡牺袭习铣戏细虾辖峡侠狭厦吓锨鲜纤咸贤衔闲显险现献县馅羡宪线厢镶乡详响项萧嚣销晓啸蝎协挟携胁谐写泻谢锌衅兴汹锈绣虚嘘须许叙绪续轩悬选癣绚学勋询寻驯训讯逊压鸦鸭哑亚讶阉烟盐严颜阎艳厌砚彦谚验鸯杨扬疡阳痒养样瑶摇尧遥窑谣药爷页业叶医铱颐遗仪彝蚁艺亿忆义诣议谊译异绎荫阴银饮隐樱婴鹰应缨莹萤营荧蝇赢颖哟拥佣痈踊咏涌优忧邮铀犹游诱舆鱼渔娱与屿语吁御狱誉预驭鸳渊辕园员圆缘远愿约跃钥岳粤悦阅云郧匀陨运蕴酝晕韵杂灾载攒暂赞赃脏凿枣灶责择则泽贼赠扎札轧铡闸栅诈斋债毡盏斩辗崭栈战绽张涨帐账胀赵蛰辙锗这贞针侦诊镇阵挣睁狰争帧郑证织职执纸挚掷帜质滞钟终种肿众诌轴皱昼骤猪诸诛烛瞩嘱贮铸筑驻专砖转赚桩庄装妆壮状锥赘坠缀谆着浊兹资渍踪综总纵邹诅组钻\\";\\r\\n        //常用繁体\\r\\n        private static $td=\\"皚藹礙愛翺襖奧壩罷擺敗頒辦絆幫綁鎊謗剝飽寶報鮑輩貝鋇狽備憊繃筆畢斃幣閉邊編貶變辯辮標鼈別癟瀕濱賓擯餅並撥缽鉑駁蔔補財參蠶殘慚慘燦蒼艙倉滄廁側冊測層詫攙摻蟬饞讒纏鏟産闡顫場嘗長償腸廠暢鈔車徹塵沈陳襯撐稱懲誠騁癡遲馳恥齒熾沖蟲寵疇躊籌綢醜櫥廚鋤雛礎儲觸處傳瘡闖創錘純綽辭詞賜聰蔥囪從叢湊躥竄錯達帶貸擔單鄲撣膽憚誕彈當擋黨蕩檔搗島禱導盜燈鄧敵滌遞締顛點墊電澱釣調叠諜疊釘頂錠訂丟東動棟凍鬥犢獨讀賭鍍鍛斷緞兌隊對噸頓鈍奪墮鵝額訛惡餓兒爾餌貳發罰閥琺礬釩煩範販飯訪紡飛誹廢費紛墳奮憤糞豐楓鋒風瘋馮縫諷鳳膚輻撫輔賦複負訃婦縛該鈣蓋幹趕稈贛岡剛鋼綱崗臯鎬擱鴿閣鉻個給龔宮鞏貢鈎溝構購夠蠱顧剮關觀館慣貫廣規矽歸龜閨軌詭櫃貴劊輥滾鍋國過駭韓漢號閡鶴賀橫轟鴻紅後壺護滬戶嘩華畫劃話懷壞歡環還緩換喚瘓煥渙黃謊揮輝毀賄穢會燴彙諱誨繪葷渾夥獲貨禍擊機積饑譏雞績緝極輯級擠幾薊劑濟計記際繼紀夾莢頰賈鉀價駕殲監堅箋間艱緘繭檢堿鹼揀撿簡儉減薦檻鑒踐賤見鍵艦劍餞漸濺澗將漿蔣槳獎講醬膠澆驕嬌攪鉸矯僥腳餃繳絞轎較稭階節莖鯨驚經頸靜鏡徑痙競淨糾廄舊駒舉據鋸懼劇鵑絹傑潔結誡屆緊錦僅謹進晉燼盡勁荊覺決訣絕鈞軍駿開凱顆殼課墾懇摳庫褲誇塊儈寬礦曠況虧巋窺饋潰擴闊蠟臘萊來賴藍欄攔籃闌蘭瀾讕攬覽懶纜爛濫撈勞澇樂鐳壘類淚籬離裏鯉禮麗厲勵礫曆瀝隸倆聯蓮連鐮憐漣簾斂臉鏈戀煉練糧涼兩輛諒療遼鐐獵臨鄰鱗凜賃齡鈴淩靈嶺領餾劉龍聾嚨籠壟攏隴樓婁摟簍蘆盧顱廬爐擄鹵虜魯賂祿錄陸驢呂鋁侶屢縷慮濾綠巒攣孿灤亂掄輪倫侖淪綸論蘿羅邏鑼籮騾駱絡媽瑪碼螞馬罵嗎買麥賣邁脈瞞饅蠻滿謾貓錨鉚貿麽黴沒鎂門悶們錳夢謎彌覓冪綿緬廟滅憫閩鳴銘謬謀畝鈉納難撓腦惱鬧餒內擬膩攆撚釀鳥聶齧鑷鎳檸獰甯擰濘鈕紐膿濃農瘧諾歐鷗毆嘔漚盤龐賠噴鵬騙飄頻貧蘋憑評潑頗撲鋪樸譜棲淒臍齊騎豈啓氣棄訖牽扡釺鉛遷簽謙錢鉗潛淺譴塹槍嗆牆薔強搶鍬橋喬僑翹竅竊欽親寢輕氫傾頃請慶瓊窮趨區軀驅齲顴權勸卻鵲確讓饒擾繞熱韌認紉榮絨軟銳閏潤灑薩鰓賽三傘喪騷掃澀殺紗篩曬刪閃陝贍繕傷賞燒紹賒攝懾設紳審嬸腎滲聲繩勝聖師獅濕詩屍時蝕實識駛勢適釋飾視試壽獸樞輸書贖屬術樹豎數帥雙誰稅順說碩爍絲飼聳慫頌訟誦擻蘇訴肅雖隨綏歲孫損筍縮瑣鎖獺撻擡態攤貪癱灘壇譚談歎湯燙濤縧討騰謄銻題體屜條貼鐵廳聽烴銅統頭禿圖塗團頹蛻脫鴕馱駝橢窪襪彎灣頑萬網韋違圍爲濰維葦偉僞緯謂衛溫聞紋穩問甕撾蝸渦窩臥嗚鎢烏汙誣無蕪吳塢霧務誤錫犧襲習銑戲細蝦轄峽俠狹廈嚇鍁鮮纖鹹賢銜閑顯險現獻縣餡羨憲線廂鑲鄉詳響項蕭囂銷曉嘯蠍協挾攜脅諧寫瀉謝鋅釁興洶鏽繡虛噓須許敘緒續軒懸選癬絢學勳詢尋馴訓訊遜壓鴉鴨啞亞訝閹煙鹽嚴顔閻豔厭硯彥諺驗鴦楊揚瘍陽癢養樣瑤搖堯遙窯謠藥爺頁業葉醫銥頤遺儀彜蟻藝億憶義詣議誼譯異繹蔭陰銀飲隱櫻嬰鷹應纓瑩螢營熒蠅贏穎喲擁傭癰踴詠湧優憂郵鈾猶遊誘輿魚漁娛與嶼語籲禦獄譽預馭鴛淵轅園員圓緣遠願約躍鑰嶽粵悅閱雲鄖勻隕運蘊醞暈韻雜災載攢暫贊贓髒鑿棗竈責擇則澤賊贈紮劄軋鍘閘柵詐齋債氈盞斬輾嶄棧戰綻張漲帳賬脹趙蟄轍鍺這貞針偵診鎮陣掙睜猙爭幀鄭證織職執紙摯擲幟質滯鍾終種腫衆謅軸皺晝驟豬諸誅燭矚囑貯鑄築駐專磚轉賺樁莊裝妝壯狀錐贅墜綴諄著濁茲資漬蹤綜總縱鄒詛組鑽\\";\\r\\n        /**\\r\\n         * 获取汉字转化拼音\\r\\n         * 繁体字转拼音会出错，需要将繁体转换为简体后，再执行拼音转换操作\\r\\n         */ \\r\\n        public static function get($str, $charset = ''gbk'', $first = 0)\\r\\n        {\\r\\n            $str = trim($str);\\r\\n\\r\\n            if ($charset != ''gbk'' && $charset != ''gb2312'') $str = iconv($charset, ''gbk'', $str);\\r\\n\\r\\n            $ret = '''';\\r\\n\\r\\n            for($i = 0; $i < strlen($str); $i++) {\\r\\n                $zh_zhi = substr($str, $i, 1);\\r\\n                //如果此字符不是中文，则跳过此次循环\\r\\n                if(!preg_match(\\"/^[\\\\x7f-\\\\xff]+$/\\", $zh_zhi)){\\r\\n                  $ret .= $zh_zhi;\\r\\n                  continue;\\r\\n                }\\r\\n                $p = ord($zh_zhi);//将ASCLL码值转换为字符\\r\\n\\r\\n                if($p > 160) {\\r\\n                    $q = ord(substr($str, ++$i, 1));\\r\\n                    $p = $p*256 + $q - 65536;\\r\\n                }\\r\\n\\r\\n                $zhi = self::chr($p);\\r\\n\\r\\n                if($first) $zhi = substr($zhi, 0, 1);\\r\\n\\r\\n                $ret .= '' ''.$zhi;\\r\\n            }\\r\\n\\r\\n            return $ret;\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * 获取汉字对应的首字母\\r\\n         */\\r\\n        public static function initial($str, $charset = ''gbk'', $first = 0)\\r\\n        {\\r\\n            $str = strtolower(self::get($str, $charset, $first));\\r\\n\\r\\n            return $first ? $str : substr($str, 0, 1);\\r\\n        }\\r\\n\\r\\n        private static function chr($num)\\r\\n        {\\r\\n            if ($num > 0 && $num < 160) {\\r\\n                return chr($num);\\r\\n            } else if ($num < -20319 || $num > -10247) {\\r\\n                return '''';\\r\\n            } else {\\r\\n                for ($i = count(self::$data)-1; $i >= 0; $i--) {\\r\\n                    if(self::$data[$i][1] <= $num) break;\\r\\n                }\\r\\n\\r\\n                return self::$data[$i][0];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * 繁体转化简体\\r\\n         *\\r\\n         * @param string $sContent 要转化的字符串\\r\\n         * @return string 转化之后得到的字符串\\r\\n         */ \\r\\n        public static function tradition2simple($sContent)\\r\\n        {\\r\\n            $simpleCN = '''';\\r\\n            $iContent=mb_strlen($sContent,''UTF-8'');\\r\\n\\r\\n            for($i=0;$i<$iContent;$i++){\\r\\n                $str=mb_substr($sContent,$i,1,''UTF-8'');\\r\\n                $match=mb_strpos(self::$td,$str,null,''UTF-8'');\\r\\n                $simpleCN.=($match!==false )?mb_substr(self::$sd,$match,1,''UTF-8''):$str;\\r\\n            }\\r\\n\\r\\n            return $simpleCN;\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * 简体转化繁体\\r\\n         * @param string $sContent 要转化的字符串\\r\\n         * @return string 转化之后得到的字符串\\r\\n         */\\r\\n        public static function simple2tradition($sContent)\\r\\n        {\\r\\n            $traditionalCN = '''';\\r\\n            $iContent=mb_strlen($sContent,''UTF-8'');\\r\\n\\r\\n            for($i=0;$i<$iContent;$i++){\\r\\n                $str=mb_substr($sContent,$i,1,''UTF-8'');\\r\\n                $match=mb_strpos(self::$sd,$str,null,''UTF-8'');\\r\\n                $traditionalCN.=($match!==false )?mb_substr(self::$td,$match,1,''UTF-8''):$str;\\r\\n            }\\r\\n\\r\\n            return $traditionalCN;\\r\\n        } \\r\\n\\r\\n</code>\\r\\n\\r\\n2. 新建一个服务提供类，使用命令 `php artisan make:provider PinYinServiceProvider`，修改其中的`register` 方法，具体为：\\r\\n\\r\\n<code>\\r\\n\\r\\n    use App\\\\Services\\\\PinYinService;//新增\\r\\n\\r\\n    public function register()\\r\\n\\r\\n    {\\r\\n\\r\\n        $this->app->bind(''pinyin'', function () {\\r\\n            return new PinYinService();\\r\\n        });\\r\\n    }\\r\\n</code>\\r\\n\\r\\n3. 因可能需要使用门面方法，所以在app目录下继续新建一个`Facades` 文件夹，同时在该文件夹下新建 `PinYinFacade.php` 文件，内容为：\\r\\n\\r\\n<code>\\r\\n\\r\\n    namespace App\\\\Facades;\\r\\n\\r\\n    use Illuminate\\\\Support\\\\Facades\\\\Facade;\\r\\n\\r\\n    /**\\r\\n     * @see \\\\App\\\\Services\\\\BaseProductService\\r\\n     */\\r\\n    class PinYinFacade extends Facade\\r\\n    {\\r\\n        /**\\r\\n         * Get the registered name of the component.\\r\\n         *\\r\\n         * @return string\\r\\n         */\\r\\n        protected static function getFacadeAccessor()\\r\\n        {\\r\\n            return ''pinyin'';\\r\\n        }\\r\\n    }\\r\\n\\r\\n</code>\\r\\n\\r\\n4. 最后在`config\\\\app.php`文件中的`providers`和`aliases`参数中添加：\\r\\n\\r\\n<code>\\r\\n\\r\\n    ''providers'' => \\r\\n    [\\r\\n        ...\\r\\n        App\\\\Providers\\\\PinYinServiceProvider::class,\\r\\n    ],\\r\\n\\r\\n    ''aliases'' => \\r\\n\\r\\n    [\\r\\n        ...\\r\\n        ''PinYin'' => App\\\\Facades\\\\PinYinFacade::class,\\r\\n    ]\\r\\n</code>\\r\\n\\r\\n5. 使用方法\\r\\n\\r\\n  - 这是我喜欢的一种调用方法`app(''pinyin'')->get(''我喜欢的'',''utf-8''); // wo xi huan de`，好处就是不需要在顶部声明，可以在任意地方使用；\\r\\n  - 也可以使用门面的调用方法，文件顶部声明`use PinYin;`,然后使用`PinYin::get(''我喜欢的'',''utf-8''); // wo xi huan de`\\r\\n  - 简繁体互换使用方法类似，换成对应方法名即可\\r\\n  - 不过繁体字转拼音会出错，需要将繁体转换为简体后，再执行拼音转换操作\\r\\n\\r\\n  代码参考[http://blog.csdn.net/daxia_85/article/details/53262117](http://blog.csdn.net/daxia_85/article/details/53262117)，做了点修改","html":"<h3>Laravel框架拼音类，中文转拼音及拼音首字母，中文简繁体互转</h3>\\n<ol>\\n<li>在app文件夹下新建 <code>Services</code> 文件夹，同时新建一个拼音的服务类<code>PinYinService</code>，我喜欢将服务类文件放在该目录下</li>\\n</ol>\\n<ul>\\n<li>文件内容为：</li>\\n</ul>\\n\\n<pre><code>namespace App\\\\Services;\\n\\nclass PinYinService\\n{\\n    static $data = [\\n        array(''a'',-20319),array(''ai'',-20317),array(''an'',-20304),array(''ang'',-20295),array(''ao'',-20292),array(''ba'',-20283),\\n        array(''bai'',-20265),array(''ban'',-20257),array(''bang'',-20242),array(''bao'',-20230),array(''bei'',-20051),array(''ben'',-20036),\\n        array(''beng'',-20032),array(''bi'',-20026),array(''bian'',-20002),array(''biao'',-19990),array(''bie'',-19986),array(''bin'',-19982),\\n        array(''bing'',-19976),array(''bo'',-19805),array(''bu'',-19784),array(''ca'',-19775),array(''cai'',-19774),array(''can'',-19763),\\n        array(''cang'',-19756),array(''cao'',-19751),array(''ce'',-19746),array(''ceng'',-19741),array(''cha'',-19739),array(''chai'',-19728),\\n        array(''chan'',-19725),array(''chang'',-19715),array(''chao'',-19540),array(''che'',-19531),array(''chen'',-19525),array(''cheng'',-19515),\\n        array(''chi'',-19500),array(''chong'',-19484),array(''chou'',-19479),array(''chu'',-19467),array(''chuai'',-19289),array(''chuan'',-19288),\\n        array(''chuang'',-19281),array(''chui'',-19275),array(''chun'',-19270),array(''chuo'',-19263),array(''ci'',-19261),array(''cong'',-19249),\\n        array(''cou'',-19243),array(''cu'',-19242),array(''cuan'',-19238),array(''cui'',-19235),array(''cun'',-19227),array(''cuo'',-19224),\\n        array(''da'',-19218),array(''dai'',-19212),array(''dan'',-19038),array(''dang'',-19023),array(''dao'',-19018),array(''de'',-19006),\\n        array(''deng'',-19003),array(''di'',-18996),array(''dian'',-18977),array(''diao'',-18961),array(''die'',-18952),array(''ding'',-18783),\\n        array(''diu'',-18774),array(''dong'',-18773),array(''dou'',-18763),array(''du'',-18756),array(''duan'',-18741),array(''dui'',-18735),\\n        array(''dun'',-18731),array(''duo'',-18722),array(''e'',-18710),array(''en'',-18697),array(''er'',-18696),array(''fa'',-18526),\\n        array(''fan'',-18518),array(''fang'',-18501),array(''fei'',-18490),array(''fen'',-18478),array(''feng'',-18463),array(''fo'',-18448),\\n        array(''fou'',-18447),array(''fu'',-18446),array(''ga'',-18239),array(''gai'',-18237),array(''gan'',-18231),array(''gang'',-18220),\\n        array(''gao'',-18211),array(''ge'',-18201),array(''gei'',-18184),array(''gen'',-18183),array(''geng'',-18181),array(''gong'',-18012),\\n        array(''gou'',-17997),array(''gu'',-17988),array(''gua'',-17970),array(''guai'',-17964),array(''guan'',-17961),array(''guang'',-17950),\\n        array(''gui'',-17947),array(''gun'',-17931),array(''guo'',-17928),array(''ha'',-17922),array(''hai'',-17759),array(''han'',-17752),\\n        array(''hang'',-17733),array(''hao'',-17730),array(''he'',-17721),array(''hei'',-17703),array(''hen'',-17701),array(''heng'',-17697),\\n        array(''hong'',-17692),array(''hou'',-17683),array(''hu'',-17676),array(''hua'',-17496),array(''huai'',-17487),array(''huan'',-17482),\\n        array(''huang'',-17468),array(''hui'',-17454),array(''hun'',-17433),array(''huo'',-17427),array(''ji'',-17417),array(''jia'',-17202),\\n        array(''jian'',-17185),array(''jiang'',-16983),array(''jiao'',-16970),array(''jie'',-16942),array(''jin'',-16915),array(''jing'',-16733),\\n        array(''jiong'',-16708),array(''jiu'',-16706),array(''ju'',-16689),array(''juan'',-16664),array(''jue'',-16657),array(''jun'',-16647),\\n        array(''ka'',-16474),array(''kai'',-16470),array(''kan'',-16465),array(''kang'',-16459),array(''kao'',-16452),array(''ke'',-16448),\\n        array(''ken'',-16433),array(''keng'',-16429),array(''kong'',-16427),array(''kou'',-16423),array(''ku'',-16419),array(''kua'',-16412),\\n        array(''kuai'',-16407),array(''kuan'',-16403),array(''kuang'',-16401),array(''kui'',-16393),array(''kun'',-16220),array(''kuo'',-16216),\\n        array(''la'',-16212),array(''lai'',-16205),array(''lan'',-16202),array(''lang'',-16187),array(''lao'',-16180),array(''le'',-16171),\\n        array(''lei'',-16169),array(''leng'',-16158),array(''li'',-16155),array(''lia'',-15959),array(''lian'',-15958),array(''liang'',-15944),\\n        array(''liao'',-15933),array(''lie'',-15920),array(''lin'',-15915),array(''ling'',-15903),array(''liu'',-15889),array(''long'',-15878),\\n        array(''lou'',-15707),array(''lu'',-15701),array(''lv'',-15681),array(''luan'',-15667),array(''lue'',-15661),array(''lun'',-15659),\\n        array(''luo'',-15652),array(''ma'',-15640),array(''mai'',-15631),array(''man'',-15625),array(''mang'',-15454),array(''mao'',-15448),\\n        array(''me'',-15436),array(''mei'',-15435),array(''men'',-15419),array(''meng'',-15416),array(''mi'',-15408),array(''mian'',-15394),\\n        array(''miao'',-15385),array(''mie'',-15377),array(''min'',-15375),array(''ming'',-15369),array(''miu'',-15363),array(''mo'',-15362),\\n        array(''mou'',-15183),array(''mu'',-15180),array(''na'',-15165),array(''nai'',-15158),array(''nan'',-15153),array(''nang'',-15150),\\n        array(''nao'',-15149),array(''ne'',-15144),array(''nei'',-15143),array(''nen'',-15141),array(''neng'',-15140),array(''ni'',-15139),\\n        array(''nian'',-15128),array(''niang'',-15121),array(''niao'',-15119),array(''nie'',-15117),array(''nin'',-15110),array(''ning'',-15109),\\n        array(''niu'',-14941),array(''nong'',-14937),array(''nu'',-14933),array(''nv'',-14930),array(''nuan'',-14929),array(''nue'',-14928),\\n        array(''nuo'',-14926),array(''o'',-14922),array(''ou'',-14921),array(''pa'',-14914),array(''pai'',-14908),array(''pan'',-14902),\\n        array(''pang'',-14894),array(''pao'',-14889),array(''pei'',-14882),array(''pen'',-14873),array(''peng'',-14871),array(''pi'',-14857),\\n        array(''pian'',-14678),array(''piao'',-14674),array(''pie'',-14670),array(''pin'',-14668),array(''ping'',-14663),array(''po'',-14654),\\n        array(''pu'',-14645),array(''qi'',-14630),array(''qia'',-14594),array(''qian'',-14429),array(''qiang'',-14407),array(''qiao'',-14399),\\n        array(''qie'',-14384),array(''qin'',-14379),array(''qing'',-14368),array(''qiong'',-14355),array(''qiu'',-14353),array(''qu'',-14345),\\n        array(''quan'',-14170),array(''que'',-14159),array(''qun'',-14151),array(''ran'',-14149),array(''rang'',-14145),array(''rao'',-14140),\\n        array(''re'',-14137),array(''ren'',-14135),array(''reng'',-14125),array(''ri'',-14123),array(''rong'',-14122),array(''rou'',-14112),\\n        array(''ru'',-14109),array(''ruan'',-14099),array(''rui'',-14097),array(''run'',-14094),array(''ruo'',-14092),array(''sa'',-14090),\\n        array(''sai'',-14087),array(''san'',-14083),array(''sang'',-13917),array(''sao'',-13914),array(''se'',-13910),array(''sen'',-13907),\\n        array(''seng'',-13906),array(''sha'',-13905),array(''shai'',-13896),array(''shan'',-13894),array(''shang'',-13878),array(''shao'',-13870),\\n        array(''she'',-13859),array(''shen'',-13847),array(''sheng'',-13831),array(''shi'',-13658),array(''shou'',-13611),array(''shu'',-13601),\\n        array(''shua'',-13406),array(''shuai'',-13404),array(''shuan'',-13400),array(''shuang'',-13398),array(''shui'',-13395),\\n        array(''shun'',-13391),array(''shuo'',-13387),array(''si'',-13383),array(''song'',-13367),array(''sou'',-13359),array(''su'',-13356),\\n        array(''suan'',-13343),array(''sui'',-13340),array(''sun'',-13329),array(''suo'',-13326),array(''ta'',-13318),array(''tai'',-13147),\\n        array(''tan'',-13138),array(''tang'',-13120),array(''tao'',-13107),array(''te'',-13096),array(''teng'',-13095),array(''ti'',-13091),\\n        array(''tian'',-13076),array(''tiao'',-13068),array(''tie'',-13063),array(''ting'',-13060),array(''tong'',-12888),array(''tou'',-12875),\\n        array(''tu'',-12871),array(''tuan'',-12860),array(''tui'',-12858),array(''tun'',-12852),array(''tuo'',-12849),array(''wa'',-12838),\\n        array(''wai'',-12831),array(''wan'',-12829),array(''wang'',-12812),array(''wei'',-12802),array(''wen'',-12607),array(''weng'',-12597),\\n        array(''wo'',-12594),array(''wu'',-12585),array(''xi'',-12556),array(''xia'',-12359),array(''xian'',-12346),array(''xiang'',-12320),\\n        array(''xiao'',-12300),array(''xie'',-12120),array(''xin'',-12099),array(''xing'',-12089),array(''xiong'',-12074),array(''xiu'',-12067),\\n        array(''xu'',-12058),array(''xuan'',-12039),array(''xue'',-11867),array(''xun'',-11861),array(''ya'',-11847),array(''yan'',-11831),\\n        array(''yang'',-11798),array(''yao'',-11781),array(''ye'',-11604),array(''yi'',-11589),array(''yin'',-11536),array(''ying'',-11358),\\n        array(''yo'',-11340),array(''yong'',-11339),array(''you'',-11324),array(''yu'',-11303),array(''yuan'',-11097),array(''yue'',-11077),\\n        array(''yun'',-11067),array(''za'',-11055),array(''zai'',-11052),array(''zan'',-11045),array(''zang'',-11041),array(''zao'',-11038),\\n        array(''ze'',-11024),array(''zei'',-11020),array(''zen'',-11019),array(''zeng'',-11018),array(''zha'',-11014),array(''zhai'',-10838),\\n        array(''zhan'',-10832),array(''zhang'',-10815),array(''zhao'',-10800),array(''zhe'',-10790),array(''zhen'',-10780),array(''zheng'',-10764),\\n        array(''zhi'',-10587),array(''zhong'',-10544),array(''zhou'',-10533),array(''zhu'',-10519),array(''zhua'',-10331),array(''zhuai'',-10329),\\n        array(''zhuan'',-10328),array(''zhuang'',-10322),array(''zhui'',-10315),array(''zhun'',-10309),array(''zhuo'',-10307),array(''zi'',-10296),\\n        array(''zong'',-10281),array(''zou'',-10274),array(''zu'',-10270),array(''zuan'',-10262),array(''zui'',-10260),array(''zun'',-10256),\\n        array(''zuo'',-10254)\\n    ];\\n    //常用简体\\n    private static $sd=&quot;皑蔼碍爱翱袄奥坝罢摆败颁办绊帮绑镑谤剥饱宝报鲍辈贝钡狈备惫绷笔毕毙币闭边编贬变辩辫标鳖别瘪濒滨宾摈饼并拨钵铂驳卜补财参蚕残惭惨灿苍舱仓沧厕侧册测层诧搀掺蝉馋谗缠铲产阐颤场尝长偿肠厂畅钞车彻尘沉陈衬撑称惩诚骋痴迟驰耻齿炽冲虫宠畴踌筹绸丑橱厨锄雏础储触处传疮闯创锤纯绰辞词赐聪葱囱从丛凑蹿窜错达带贷担单郸掸胆惮诞弹当挡党荡档捣岛祷导盗灯邓敌涤递缔颠点垫电淀钓调迭谍叠钉顶锭订丢东动栋冻斗犊独读赌镀锻断缎兑队对吨顿钝夺堕鹅额讹恶饿儿尔饵贰发罚阀珐矾钒烦范贩饭访纺飞诽废费纷坟奋愤粪丰枫锋风疯冯缝讽凤肤辐抚辅赋复负讣妇缚该钙盖干赶秆赣冈刚钢纲岗皋镐搁鸽阁铬个给龚宫巩贡钩沟构购够蛊顾剐关观馆惯贯广规硅归龟闺轨诡柜贵刽辊滚锅国过骇韩汉号阂鹤贺横轰鸿红后壶护沪户哗华画划话怀坏欢环还缓换唤痪焕涣黄谎挥辉毁贿秽会烩汇讳诲绘荤浑伙获货祸击机积饥讥鸡绩缉极辑级挤几蓟剂济计记际继纪夹荚颊贾钾价驾歼监坚笺间艰缄茧检碱硷拣捡简俭减荐槛鉴践贱见键舰剑饯渐溅涧将浆蒋桨奖讲酱胶浇骄娇搅铰矫侥脚饺缴绞轿较秸阶节茎鲸惊经颈静镜径痉竞净纠厩旧驹举据锯惧剧鹃绢杰洁结诫届紧锦仅谨进晋烬尽劲荆觉决诀绝钧军骏开凯颗壳课垦恳抠库裤夸块侩宽矿旷况亏岿窥馈溃扩阔蜡腊莱来赖蓝栏拦篮阑兰澜谰揽览懒缆烂滥捞劳涝乐镭垒类泪篱离里鲤礼丽厉励砾历沥隶俩联莲连镰怜涟帘敛脸链恋炼练粮凉两辆谅疗辽镣猎临邻鳞凛赁龄铃凌灵岭领馏刘龙聋咙笼垄拢陇楼娄搂篓芦卢颅庐炉掳卤虏鲁赂禄录陆驴吕铝侣屡缕虑滤绿峦挛孪滦乱抡轮伦仑沦纶论萝罗逻锣箩骡骆络妈玛码蚂马骂吗买麦卖迈脉瞒馒蛮满谩猫锚铆贸么霉没镁门闷们锰梦谜弥觅幂绵缅庙灭悯闽鸣铭谬谋亩钠纳难挠脑恼闹馁内拟腻撵捻酿鸟聂啮镊镍柠狞宁拧泞钮纽脓浓农疟诺欧鸥殴呕沤盘庞赔喷鹏骗飘频贫苹凭评泼颇扑铺朴谱栖凄脐齐骑岂启气弃讫牵扦钎铅迁签谦钱钳潜浅谴堑枪呛墙蔷强抢锹桥乔侨翘窍窃钦亲寝轻氢倾顷请庆琼穷趋区躯驱龋颧权劝却鹊确让饶扰绕热韧认纫荣绒软锐闰润洒萨鳃赛叁伞丧骚扫涩杀纱筛晒删闪陕赡缮伤赏烧绍赊摄慑设绅审婶肾渗声绳胜圣师狮湿诗尸时蚀实识驶势适释饰视试寿兽枢输书赎属术树竖数帅双谁税顺说硕烁丝饲耸怂颂讼诵擞苏诉肃虽随绥岁孙损笋缩琐锁獭挞抬态摊贪瘫滩坛谭谈叹汤烫涛绦讨腾誊锑题体屉条贴铁厅听烃铜统头秃图涂团颓蜕脱鸵驮驼椭洼袜弯湾顽万网韦违围为潍维苇伟伪纬谓卫温闻纹稳问瓮挝蜗涡窝卧呜钨乌污诬无芜吴坞雾务误锡牺袭习铣戏细虾辖峡侠狭厦吓锨鲜纤咸贤衔闲显险现献县馅羡宪线厢镶乡详响项萧嚣销晓啸蝎协挟携胁谐写泻谢锌衅兴汹锈绣虚嘘须许叙绪续轩悬选癣绚学勋询寻驯训讯逊压鸦鸭哑亚讶阉烟盐严颜阎艳厌砚彦谚验鸯杨扬疡阳痒养样瑶摇尧遥窑谣药爷页业叶医铱颐遗仪彝蚁艺亿忆义诣议谊译异绎荫阴银饮隐樱婴鹰应缨莹萤营荧蝇赢颖哟拥佣痈踊咏涌优忧邮铀犹游诱舆鱼渔娱与屿语吁御狱誉预驭鸳渊辕园员圆缘远愿约跃钥岳粤悦阅云郧匀陨运蕴酝晕韵杂灾载攒暂赞赃脏凿枣灶责择则泽贼赠扎札轧铡闸栅诈斋债毡盏斩辗崭栈战绽张涨帐账胀赵蛰辙锗这贞针侦诊镇阵挣睁狰争帧郑证织职执纸挚掷帜质滞钟终种肿众诌轴皱昼骤猪诸诛烛瞩嘱贮铸筑驻专砖转赚桩庄装妆壮状锥赘坠缀谆着浊兹资渍踪综总纵邹诅组钻&quot;;\\n    //常用繁体\\n    private static $td=&quot;皚藹礙愛翺襖奧壩罷擺敗頒辦絆幫綁鎊謗剝飽寶報鮑輩貝鋇狽備憊繃筆畢斃幣閉邊編貶變辯辮標鼈別癟瀕濱賓擯餅並撥缽鉑駁蔔補財參蠶殘慚慘燦蒼艙倉滄廁側冊測層詫攙摻蟬饞讒纏鏟産闡顫場嘗長償腸廠暢鈔車徹塵沈陳襯撐稱懲誠騁癡遲馳恥齒熾沖蟲寵疇躊籌綢醜櫥廚鋤雛礎儲觸處傳瘡闖創錘純綽辭詞賜聰蔥囪從叢湊躥竄錯達帶貸擔單鄲撣膽憚誕彈當擋黨蕩檔搗島禱導盜燈鄧敵滌遞締顛點墊電澱釣調叠諜疊釘頂錠訂丟東動棟凍鬥犢獨讀賭鍍鍛斷緞兌隊對噸頓鈍奪墮鵝額訛惡餓兒爾餌貳發罰閥琺礬釩煩範販飯訪紡飛誹廢費紛墳奮憤糞豐楓鋒風瘋馮縫諷鳳膚輻撫輔賦複負訃婦縛該鈣蓋幹趕稈贛岡剛鋼綱崗臯鎬擱鴿閣鉻個給龔宮鞏貢鈎溝構購夠蠱顧剮關觀館慣貫廣規矽歸龜閨軌詭櫃貴劊輥滾鍋國過駭韓漢號閡鶴賀橫轟鴻紅後壺護滬戶嘩華畫劃話懷壞歡環還緩換喚瘓煥渙黃謊揮輝毀賄穢會燴彙諱誨繪葷渾夥獲貨禍擊機積饑譏雞績緝極輯級擠幾薊劑濟計記際繼紀夾莢頰賈鉀價駕殲監堅箋間艱緘繭檢堿鹼揀撿簡儉減薦檻鑒踐賤見鍵艦劍餞漸濺澗將漿蔣槳獎講醬膠澆驕嬌攪鉸矯僥腳餃繳絞轎較稭階節莖鯨驚經頸靜鏡徑痙競淨糾廄舊駒舉據鋸懼劇鵑絹傑潔結誡屆緊錦僅謹進晉燼盡勁荊覺決訣絕鈞軍駿開凱顆殼課墾懇摳庫褲誇塊儈寬礦曠況虧巋窺饋潰擴闊蠟臘萊來賴藍欄攔籃闌蘭瀾讕攬覽懶纜爛濫撈勞澇樂鐳壘類淚籬離裏鯉禮麗厲勵礫曆瀝隸倆聯蓮連鐮憐漣簾斂臉鏈戀煉練糧涼兩輛諒療遼鐐獵臨鄰鱗凜賃齡鈴淩靈嶺領餾劉龍聾嚨籠壟攏隴樓婁摟簍蘆盧顱廬爐擄鹵虜魯賂祿錄陸驢呂鋁侶屢縷慮濾綠巒攣孿灤亂掄輪倫侖淪綸論蘿羅邏鑼籮騾駱絡媽瑪碼螞馬罵嗎買麥賣邁脈瞞饅蠻滿謾貓錨鉚貿麽黴沒鎂門悶們錳夢謎彌覓冪綿緬廟滅憫閩鳴銘謬謀畝鈉納難撓腦惱鬧餒內擬膩攆撚釀鳥聶齧鑷鎳檸獰甯擰濘鈕紐膿濃農瘧諾歐鷗毆嘔漚盤龐賠噴鵬騙飄頻貧蘋憑評潑頗撲鋪樸譜棲淒臍齊騎豈啓氣棄訖牽扡釺鉛遷簽謙錢鉗潛淺譴塹槍嗆牆薔強搶鍬橋喬僑翹竅竊欽親寢輕氫傾頃請慶瓊窮趨區軀驅齲顴權勸卻鵲確讓饒擾繞熱韌認紉榮絨軟銳閏潤灑薩鰓賽三傘喪騷掃澀殺紗篩曬刪閃陝贍繕傷賞燒紹賒攝懾設紳審嬸腎滲聲繩勝聖師獅濕詩屍時蝕實識駛勢適釋飾視試壽獸樞輸書贖屬術樹豎數帥雙誰稅順說碩爍絲飼聳慫頌訟誦擻蘇訴肅雖隨綏歲孫損筍縮瑣鎖獺撻擡態攤貪癱灘壇譚談歎湯燙濤縧討騰謄銻題體屜條貼鐵廳聽烴銅統頭禿圖塗團頹蛻脫鴕馱駝橢窪襪彎灣頑萬網韋違圍爲濰維葦偉僞緯謂衛溫聞紋穩問甕撾蝸渦窩臥嗚鎢烏汙誣無蕪吳塢霧務誤錫犧襲習銑戲細蝦轄峽俠狹廈嚇鍁鮮纖鹹賢銜閑顯險現獻縣餡羨憲線廂鑲鄉詳響項蕭囂銷曉嘯蠍協挾攜脅諧寫瀉謝鋅釁興洶鏽繡虛噓須許敘緒續軒懸選癬絢學勳詢尋馴訓訊遜壓鴉鴨啞亞訝閹煙鹽嚴顔閻豔厭硯彥諺驗鴦楊揚瘍陽癢養樣瑤搖堯遙窯謠藥爺頁業葉醫銥頤遺儀彜蟻藝億憶義詣議誼譯異繹蔭陰銀飲隱櫻嬰鷹應纓瑩螢營熒蠅贏穎喲擁傭癰踴詠湧優憂郵鈾猶遊誘輿魚漁娛與嶼語籲禦獄譽預馭鴛淵轅園員圓緣遠願約躍鑰嶽粵悅閱雲鄖勻隕運蘊醞暈韻雜災載攢暫贊贓髒鑿棗竈責擇則澤賊贈紮劄軋鍘閘柵詐齋債氈盞斬輾嶄棧戰綻張漲帳賬脹趙蟄轍鍺這貞針偵診鎮陣掙睜猙爭幀鄭證織職執紙摯擲幟質滯鍾終種腫衆謅軸皺晝驟豬諸誅燭矚囑貯鑄築駐專磚轉賺樁莊裝妝壯狀錐贅墜綴諄著濁茲資漬蹤綜總縱鄒詛組鑽&quot;;\\n    /**\\n     * 获取汉字转化拼音\\n     * 繁体字转拼音会出错，需要将繁体转换为简体后，再执行拼音转换操作\\n     */ \\n    public static function get($str, $charset = ''gbk'', $first = 0)\\n    {\\n        $str = trim($str);\\n\\n        if ($charset != ''gbk'' &amp;&amp; $charset != ''gb2312'') $str = iconv($charset, ''gbk'', $str);\\n\\n        $ret = '''';\\n\\n        for($i = 0; $i &lt; strlen($str); $i++) {\\n            $zh_zhi = substr($str, $i, 1);\\n            //如果此字符不是中文，则跳过此次循环\\n            if(!preg_match(&quot;/^[\\\\x7f-\\\\xff]+$/&quot;, $zh_zhi)){\\n              $ret .= $zh_zhi;\\n              continue;\\n            }\\n            $p = ord($zh_zhi);//将ASCLL码值转换为字符\\n\\n            if($p &gt; 160) {\\n                $q = ord(substr($str, ++$i, 1));\\n                $p = $p*256 + $q - 65536;\\n            }\\n\\n            $zhi = self::chr($p);\\n\\n            if($first) $zhi = substr($zhi, 0, 1);\\n\\n            $ret .= '' ''.$zhi;\\n        }\\n\\n        return $ret;\\n    }\\n\\n    /**\\n     * 获取汉字对应的首字母\\n     */\\n    public static function initial($str, $charset = ''gbk'', $first = 0)\\n    {\\n        $str = strtolower(self::get($str, $charset, $first));\\n\\n        return $first ? $str : substr($str, 0, 1);\\n    }\\n\\n    private static function chr($num)\\n    {\\n        if ($num &gt; 0 &amp;&amp; $num &lt; 160) {\\n            return chr($num);\\n        } else if ($num &lt; -20319 || $num &gt; -10247) {\\n            return '''';\\n        } else {\\n            for ($i = count(self::$data)-1; $i &gt;= 0; $i--) {\\n                if(self::$data[$i][1] &lt;= $num) break;\\n            }\\n\\n            return self::$data[$i][0];\\n        }\\n    }\\n\\n    /**\\n     * 繁体转化简体\\n     *\\n     * @param string $sContent 要转化的字符串\\n     * @return string 转化之后得到的字符串\\n     */ \\n    public static function tradition2simple($sContent)\\n    {\\n        $simpleCN = '''';\\n        $iContent=mb_strlen($sContent,''UTF-8'');\\n\\n        for($i=0;$i&lt;$iContent;$i++){\\n            $str=mb_substr($sContent,$i,1,''UTF-8'');\\n            $match=mb_strpos(self::$td,$str,null,''UTF-8'');\\n            $simpleCN.=($match!==false )?mb_substr(self::$sd,$match,1,''UTF-8''):$str;\\n        }\\n\\n        return $simpleCN;\\n    }\\n\\n    /**\\n     * 简体转化繁体\\n     * @param string $sContent 要转化的字符串\\n     * @return string 转化之后得到的字符串\\n     */\\n    public static function simple2tradition($sContent)\\n    {\\n        $traditionalCN = '''';\\n        $iContent=mb_strlen($sContent,''UTF-8'');\\n\\n        for($i=0;$i&lt;$iContent;$i++){\\n            $str=mb_substr($sContent,$i,1,''UTF-8'');\\n            $match=mb_strpos(self::$sd,$str,null,''UTF-8'');\\n            $traditionalCN.=($match!==false )?mb_substr(self::$td,$match,1,''UTF-8''):$str;\\n        }\\n\\n        return $traditionalCN;\\n    } \\n</code></pre>\\n\\n<ol start=\\"2\\">\\n<li>新建一个服务提供类，使用命令 <code>php artisan make:provider PinYinServiceProvider</code>，修改其中的<code>register</code> 方法，具体为：</li>\\n</ol>\\n\\n<pre><code>use App\\\\Services\\\\PinYinService;//新增\\n\\npublic function register()\\n\\n{\\n\\n    $this-&gt;app-&gt;bind(''pinyin'', function () {\\n        return new PinYinService();\\n    });\\n}\\n</code></pre>\\n\\n<ol start=\\"3\\">\\n<li>因可能需要使用门面方法，所以在app目录下继续新建一个<code>Facades</code> 文件夹，同时在该文件夹下新建 <code>PinYinFacade.php</code> 文件，内容为：</li>\\n</ol>\\n\\n<pre><code>namespace App\\\\Facades;\\n\\nuse Illuminate\\\\Support\\\\Facades\\\\Facade;\\n\\n/**\\n * @see \\\\App\\\\Services\\\\BaseProductService\\n */\\nclass PinYinFacade extends Facade\\n{\\n    /**\\n     * Get the registered name of the component.\\n     *\\n     * @return string\\n     */\\n    protected static function getFacadeAccessor()\\n    {\\n        return ''pinyin'';\\n    }\\n}\\n</code></pre>\\n\\n<ol start=\\"4\\">\\n<li>最后在<code>config\\\\app.php</code>文件中的<code>providers</code>和<code>aliases</code>参数中添加：</li>\\n</ol>\\n\\n<pre><code>''providers'' =&gt; \\n[\\n    ...\\n    App\\\\Providers\\\\PinYinServiceProvider::class,\\n],\\n\\n''aliases'' =&gt; \\n\\n[\\n    ...\\n    ''PinYin'' =&gt; App\\\\Facades\\\\PinYinFacade::class,\\n]\\n</code></pre>\\n\\n<ol start=\\"5\\">\\n<li>使用方法</li>\\n</ol>\\n<ul>\\n<li>这是我喜欢的一种调用方法<code>app(''pinyin'')-&gt;get(''我喜欢的'',''utf-8''); // wo xi huan de</code>，好处就是不需要在顶部声明，可以在任意地方使用；</li>\\n<li>也可以使用门面的调用方法，文件顶部声明<code>use PinYin;</code>,然后使用<code>PinYin::get(''我喜欢的'',''utf-8''); // wo xi huan de</code>\\n</li>\\n<li>简繁体互换使用方法类似，换成对应方法名即可</li>\\n<li>不过繁体字转拼音会出错，需要将繁体转换为简体后，再执行拼音转换操作</li>\\n</ul>\\n<p>代码参考<a href=\\"http://blog.csdn.net/daxia_85/article/details/53262117\\">http://blog.csdn.net/daxia_85/article/details/53262117</a>，做了点修改</p>\\n"}', '', '在laravel框架内中文转拼音，简繁体互转', 0, 0, 0, '2017-09-01 13:30:00', '2017-09-01 14:32:33', '2017-09-02 08:53:28', NULL);
INSERT INTO `articles` (`id`, `category_id`, `slug`, `title`, `subtitle`, `content`, `page_image`, `meta_description`, `is_original`, `is_draft`, `view_count`, `published_at`, `created_at`, `updated_at`, `deleted_at`) VALUES
(13, 9, 'zhi-fu-bao-di-san-fang-shou-quan-deng-lu', '支付宝第三方授权登陆', 'laravel框架支付宝第三方授权登陆', '{"raw":"### 支付宝第三方授权登陆\\r\\n\\r\\n> 说明：支付宝第三方授权登陆需要的一些必要参数，此处不做具体说明，有不明白可以自行百度或者查看官方文档[官方参考地址：https://docs.open.alipay.com/common/105193](https://docs.open.alipay.com/common/105193)\\r\\n\\r\\n> 此处做一个简单获取说明：\\r\\n\\r\\n>  - 登录支付宝开放平台。[官方地址：https://open.alipay.com](https://open.alipay.com)，进入开发者中心，创建应用，并申请应用上线，选择 获取会员信息功能。\\r\\n\\r\\n>  - 设置 授权回调路径 和 接口加签方式（选择RSA2(SHA256)密钥）\\r\\n\\r\\n>  - 密钥 生成 需要下载支付宝提供的生成工具。[工具链接：https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7386797.0.0.iZGFov&treeId=291&articleId=105971&docType=1](https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7386797.0.0.iZGFov&treeId=291&articleId=105971&docType=1)；因为我们用的是PHP版本，所以格式选择非java，长度选择2048，生成秘钥后绑定到支付宝开发中心。\\r\\n\\r\\n1. 首先需要到阿里官方下载对应的SDK，我们用的是PHP，所以选择PHP版本下载，[参考地址：https://docs.open.alipay.com/54/103419](https://docs.open.alipay.com/54/103419)，解压后，复制下面4个文件\\r\\n\\r\\n![file](/uploads/markdown/akldfghkbajkhrg.png)\\r\\n\\r\\n2. 因为需要引入第三方SDK，为了方便，在app目录下新建`Libs`文件夹，再在Libs目录下新建`AlipayAop`文件夹，之后将之前复制的4个文件放在`AlipayAop`目录下；为了方便引用SDK中的类，我们在项目根目录的`conposer.json`文件中，找到图片对应的位置，添加上`app/Libs/`，使其能随着项目自动加载\\r\\n\\r\\n![file](/uploads/markdown/jsdfbgsadkfjgbk.png)\\r\\n\\r\\n> 此处可能会出现一个tmp问题，解决办法：在`app/Libs/AlipayAop/lotusphp_runtime`文件夹下新建一个新的文件夹`tmp`；\\r\\n\\r\\n> 如果是本地环境，要进行正常访问的话，可能需要修改支付宝SDK的入口文件`AopSdk.php`，具体修改如下图\\r\\n\\r\\n> ![file](/uploads/markdown/ajhrkbjdfgjshfbg.png)\\r\\n\\r\\n> 如果没有出现问题的话，此处可以略过。\\r\\n\\r\\n3. 相关参数配置，为了方便，我们在`config`文件夹下新建一个新的配置文件`auth_alipay.php`，具体内容为：\\r\\n\\r\\n<code>\\r\\n\\r\\n    return [\\r\\n\\t''alipay'' => [\\r\\n            ''app_id'' => ''your_app_id'',\\r\\n            ''scope'' => ''auth_userinfo'',//接口权限值，目前只支持auth_userinfo(获取用户详细信息，需要用户授权)和auth_base(只能获取到用户在支付宝中的userID)两个值\\r\\n            ''redirect'' => ''http://www.example.com/auth/socialite_ali/alipay/callback'',//回调地址\\r\\n\\r\\n            ''privateKey'' => ''之前工具生成的应用私钥（很长的一段字符串）'',//商户应用私钥\\r\\n\\r\\n            ''publicKey'' => ''之前工具生成的应用公钥'',//商户应用公钥\\r\\n\\r\\n        ],\\r\\n    ];\\r\\n\\r\\n</code>\\r\\n\\r\\n4. 参数配置完成后，下面开始正戏；此处我们还是使用laravel的服务提供者模式，此模式具体设置方法，此处不做说明，有不清楚的请查看laravel官方文档或者本人的上一篇文章 _[PHP中文转拼音](http://www.fanrenos.com/blog/php-zhong-wen-zhuan-pin-yin)_。\\r\\n\\r\\n  - 首先创建新的Services类，在`app\\\\Services`目录下，新建一个新的类`AuthAliPayService`，具体类容如下：\\r\\n\\r\\n<code>\\r\\n\\r\\n    namespace App\\\\Services;\\r\\n    use Symfony\\\\Component\\\\HttpFoundation\\\\RedirectResponse;\\r\\n    //引入的SDK\\r\\n    require (app_path() . ''/Libs/AlipayAop/AopSdk.php'');\\r\\n    use AlipayAop\\\\aop\\\\AopClient;\\r\\n    use AlipayAop\\\\aop\\\\request\\\\AlipaySystemOauthTokenRequest;\\r\\n    use AlipayAop\\\\aop\\\\request\\\\AlipayUserUserinfoShareRequest;\\r\\n\\r\\n    /**\\r\\n    * 支付宝第三方授权\\r\\n    */\\r\\n    class AuthAliPayService\\r\\n    {\\r\\n\\t    function __construct()\\r\\n\\t    {\\r\\n\\t\\t$this->app_id = config(''auth_alipay.alipay.app_id'');\\r\\n\\t\\t$this->scope = config(''auth_alipay.alipay.scope'');\\r\\n\\t\\t$this->redirect = config(''auth_alipay.alipay.redirect'');\\r\\n\\t\\t$this->privateKey = config(''auth_alipay.alipay.privateKey'');\\r\\n\\t\\t$this->publicKey = config(''auth_alipay.alipay.publicKey'');\\r\\n\\t\\t$this->token_uri = ''https://openapi.alipay.com/gateway.do'';\\r\\n\\t    }\\r\\n\\r\\n\\t/**\\r\\n         * {@inheritdoc}.\\r\\n         * 返回授权的完整路由\\r\\n         * @see \\\\Laravel\\\\Socialite\\\\Two\\\\AbstractProvider::getAuthUrl()\\r\\n         */\\r\\n        protected function getAuthUrl($state)\\r\\n        {\\r\\n            return $this->buildAuthUrlFromBase(''https://openauth.alipay.com/oauth2/publicAppAuthorize.htm'', $state);\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * {@inheritdoc}.\\r\\n         * 设置正确的url参数\\r\\n         */\\r\\n        protected function buildAuthUrlFromBase($url, $state)\\r\\n        {\\r\\n            $query = http_build_query($this->getCodeFields($state));\\r\\n\\r\\n            return $url.''?''.$query;\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * {@inheritdoc}.\\r\\n         * 授权路由需要的参数\\r\\n         */\\r\\n        protected function getCodeFields($state = null)\\r\\n        {\\r\\n            return [\\r\\n                ''app_id'' => $this->app_id,\\r\\n                ''redirect_uri'' => $this->redirect,\\r\\n                ''scope'' => $this->scope,\\r\\n                ''state'' => $state,\\r\\n            ];\\r\\n        }\\r\\n\\r\\n\\t    /**\\r\\n\\t     * 跳转到支付宝授权页面\\r\\n\\t     * @return [type] [description]\\r\\n\\t     */\\r\\n\\t    public function redirect($state){\\r\\n\\t\\t$url = $this->getAuthUrl($state);\\r\\n\\t\\treturn new RedirectResponse($url);\\r\\n\\t    }\\r\\n\\r\\n\\t    /**\\r\\n\\t     * 获取用户支付宝信息\\r\\n\\t     * @param  [type] $auth_code [description]\\r\\n\\t     * @return [type]            [description]\\r\\n\\t     */\\r\\n\\t    public function user($auth_code){\\r\\n\\t\\t//初始化\\r\\n\\t\\t$aop = new \\\\AopClient();\\r\\n\\t\\t$aop->gatewayUrl = $this->token_uri;\\r\\n\\t\\t$aop->appId = $this->app_id;\\r\\n\\t\\t$aop->rsaPrivateKey = $this->privateKey;\\r\\n\\t\\t$aop->alipayrsaPublicKey = $this->publicKey;\\r\\n\\t\\t$aop->apiVersion = ''1.0'';\\r\\n\\t\\t$aop->signType = ''RSA2'';\\r\\n\\t\\t$aop->postCharset=''UTF-8'';\\r\\n\\t\\t$aop->format=''json'';\\r\\n\\r\\n\\t\\t//获取access_token\\r\\n\\t\\t$request = new \\\\AlipaySystemOauthTokenRequest();\\r\\n\\t\\t$request->setGrantType(\\"authorization_code\\");\\r\\n\\t\\t$request->setCode($auth_code);//这里传入 code\\r\\n\\t\\t$result = $aop->execute($request);\\r\\n\\t\\t$responseNode = str_replace(\\".\\", \\"_\\", $request->getApiMethodName()) . \\"_response\\";\\r\\n\\t\\t$access_token = $result->$responseNode->access_token;\\r\\n\\r\\n\\t\\t//获取用户信息\\r\\n\\t\\t$request_a = new \\\\AlipayUserUserinfoShareRequest();\\r\\n\\t\\t$result_a = $aop->execute ($request_a,$access_token); //这里传入获取的access_token\\r\\n\\t\\t$responseNode_a = str_replace(\\".\\", \\"_\\", $request_a->getApiMethodName()) . \\"_response\\";\\r\\n\\r\\n\\t\\t$user_id = $result_a->$responseNode_a->alipay_user_id;   //用户唯一id\\r\\n\\t\\t$headimgurl = empty($result_a->$responseNode_a->avatar) ? NULL : $result_a->$responseNode_a->avatar;   //用户头像\\r\\n\\t\\t$nick_name = empty($result_a->$responseNode_a->nick_name) ? NULL : $result_a->$responseNode_a->nick_name;    //用户昵称\\r\\n\\t\\t$gender = $result_a->$responseNode_a->gender;//用户性别\\r\\n\\t\\tif($gender==''m''){\\r\\n\\t\\t\\t$sex = ''男'';\\r\\n\\t\\t}else if($gender==''f''){\\r\\n\\t\\t\\t$sex = ''女'';\\r\\n\\t\\t}else{\\r\\n\\t\\t\\t$sex = NULL;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//文档：https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.v7xVPE&treeId=53&articleId=104114&docType=1\\r\\n\\t\\t$user = [\\r\\n\\t\\t\\t''user_id'' => $user_id,\\r\\n\\t\\t\\t''nick_name'' => $nick_name,\\r\\n\\t\\t\\t''avatar'' => $headimgurl,\\r\\n\\t\\t\\t''gender'' => $sex,\\r\\n\\t\\t];\\r\\n\\t\\treturn $user;\\r\\n\\t    }\\r\\n    }\\r\\n\\r\\n</code>\\r\\n\\r\\n  - 使用命令`php artisan make:provider AuthAliPayServiceProvider`，创建新的Provider类，修改其中的`register`方法；\\r\\n\\r\\n<code>\\r\\n\\r\\n    use App\\\\Services\\\\AuthAliPayService;//新增\\r\\n    public function register()\\r\\n    {\\r\\n        $this->app->bind(''auth_alipay'', function () {\\r\\n            return new AuthAliPayService();\\r\\n        });\\r\\n    }\\r\\n\\r\\n</code>\\r\\n\\r\\n  - 创建门面类，在`app\\\\Facades`目录下新建新的文件`AuthAliPayFacade`，内容为：\\r\\n\\r\\n<code>\\r\\n\\r\\n    namespace App\\\\Facades;\\r\\n\\r\\n    use Illuminate\\\\Support\\\\Facades\\\\Facade;\\r\\n    /**\\r\\n     * @see \\\\App\\\\Services\\\\AuthAliPayFacade\\r\\n     */\\r\\n    class AuthAliPayFacade extends Facade\\r\\n    {\\r\\n        /**\\r\\n         * Get the registered name of the component.\\r\\n         *\\r\\n         * @return string\\r\\n         */\\r\\n        protected static function getFacadeAccessor()\\r\\n        {\\r\\n            return ''auth_alipay'';\\r\\n        }\\r\\n    }\\r\\n\\r\\n</code>\\r\\n\\r\\n  - 最终在`config\\\\app.php`文件中添加上对应的参数；\\r\\n\\r\\n<code>\\r\\n\\r\\n    ''providers'' => [\\r\\n        ...\\r\\n        App\\\\Providers\\\\AuthAliPayServiceProvider::class,\\r\\n    ];\\r\\n    ''aliases'' => [\\r\\n        ...\\r\\n        ''AuthAlipay'' => App\\\\Providers\\\\AuthAliPayServiceProvider::class,//支付宝登陆授权\\r\\n    ];\\r\\n\\r\\n</code>\\r\\n\\r\\n### 到此为止，必要代码布置完成，下面介绍使用方法\\r\\n\\r\\n1. 创建对应的路由\\r\\n\\r\\n<code>\\r\\n\\r\\n    Route::get(''auth/socialite_ali/alipay'',''Auth\\\\AliPayLoginController@redirectToAli'');//登陆跳转\\r\\n    Route::get(''auth/socialite_ali/alipay/callback'',''Auth\\\\AliPayLoginController@handleAliCallback'');//回调路由\\r\\n\\r\\n</code>\\r\\n\\r\\n2. 使用命令`php artisan make:controller Auth\\\\AliPayLoginController`创建对应的controller；controller具体名称和位置，请自行设置；\\r\\n\\r\\n<code>\\r\\n\\r\\n    namespace App\\\\Http\\\\Controllers\\\\Auth;\\r\\n\\r\\n    use Illuminate\\\\Http\\\\Request;\\r\\n    use AuthAlipay;\\r\\n    use App\\\\User;\\r\\n    use Auth;\\r\\n\\r\\n    use App\\\\Http\\\\Requests;\\r\\n    use App\\\\Http\\\\Controllers\\\\Controller;\\r\\n\\r\\n    class AliPayLoginController extends Controller\\r\\n    {\\r\\n        /**\\r\\n         * Display a listing of the resource.\\r\\n         *\\r\\n         * @return \\\\Illuminate\\\\Http\\\\Response\\r\\n         */\\r\\n        public function redirectToAli(Request $request)\\r\\n        {\\r\\n            $time = time();\\r\\n            $token = genToken(32).$time;//genToken()主要是用于创建一个唯一token；此参数主要是为了创建一个可以标识的唯一参数，用于验证阿里服务器返回的参数是否正确；你可以换成你自己的函数，PHP自带的随机生成函数都是可以的，如果有需要的，我会在文章末尾贴出该函数\\r\\n            $request->session()->put($token,$token);\\r\\n            //return AuthAlipay::redirect($token);\\r\\n            return app(''auth_alipay'')->redirect($token);\\r\\n        }\\r\\n\\r\\n        public function handleAliCallback(Request $request)\\r\\n        {\\r\\n            //验证链接是否正确\\r\\n            $status = $request->get(''state'');\\r\\n\\r\\n            if($request->session()->has($status) && $request->session()->get($status)==$status){\\r\\n\\r\\n                $request->session()->forget($status);//删除session\\r\\n\\r\\n                $auth_code = $request->get(''auth_code'');\\r\\n\\r\\n                //使用auth_code换取接口access_token及用户userId以及其他的一些信息\\r\\n                $user = app(''auth_alipay'')->user($auth_code);\\r\\n\\r\\n                $user_id = $user[''user_id''];//支付宝授权用户唯一id\\r\\n\\r\\n                $nick_name = empty($user[''nick_name'']) ? NULL : $user[''nick_name''];\\r\\n\\r\\n                $avatar = empty($user[''avatar'']) ? NULL : $user[''avatar''];//头像暂时先不动\\r\\n\\r\\n                $gender = $user[''gender''];\\r\\n\\r\\n                //判断是否是第一次登陆\\r\\n                //先判断当前用户是否已经登录了\\r\\n                if(!Auth::guest()){\\r\\n\\r\\n                    //已经登录了，执行绑定操作\\r\\n                    $u_id = Auth::user()->user_id;\\r\\n\\r\\n                    //先判断当前的第三方是否已经绑定了\\r\\n                    $is_binding = User::where(''user_zhifubao'',$user_id)->first();\\r\\n\\r\\n                    if(!$is_binding){\\r\\n\\r\\n                        User::where(''user_id'',$u_id)->update([''user_zhifubao'' => $user_id,]);\\r\\n\\r\\n                    }else{\\r\\n\\r\\n                        return redirect(''userorder/userinfo?order-style=personalInfo'')->withErrors(''此支付宝账号已经注册过或绑定过本平台账号，请换个支付宝账号进行绑定或使用该账号进行重新登陆！'');\\r\\n\\r\\n                    }\\r\\n\\r\\n                    return redirect(''userorder/userinfo?order-style=personalInfo'');\\r\\n\\r\\n                }else{\\r\\n\\r\\n                    $is_binding = User::where(''user_zhifubao'',$user_id)->first();\\r\\n\\r\\n                    if($is_binding){\\r\\n\\r\\n                        $u_id = $is_binding->user_id;\\r\\n\\r\\n                    }else{\\r\\n\\r\\n                        $time = time();\\r\\n\\r\\n                        //否则以当前第三方信息，创建一个新的用户信息\\r\\n                        $data = [\\r\\n                            ''user_email'' => NULL,\\r\\n                            ''user_phone'' => NULL,\\r\\n                            ''user_zhifubao'' => $user_id,\\r\\n                            ''user_password'' => NULL,\\r\\n                            ''user_type'' => ''1'',\\r\\n                            ''user_level'' =>''VIP0'',\\r\\n                            ''user_gender'' => $gender,\\r\\n                            ''user_points'' => 1000,\\r\\n                            ''user_isfetch_register'' => 1,\\r\\n                            ''user_createtime'' => $time,\\r\\n                            ''user_fromdevice'' => 3,\\r\\n                            ''user_nickname'' => $nick_name\\r\\n                        ];\\r\\n\\r\\n                        $u_id = DB::table(''trs_user'')->insertGetId($data);\\r\\n                    }\\r\\n\\r\\n                    //通过用户ID直接进行认证\\r\\n                    Auth::loginUsingId($u_id);\\r\\n                    //登陆成功后，跳转到之前的页面\\r\\n                    return redirect()->intended(''/'');\\r\\n                }\\r\\n            }else{\\r\\n                return redirect(''auth/login'')->withErrors(''网络或认证信息出错，请重试！'');\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n</code>\\r\\n\\r\\n3. 至此，在laravel上进行支付宝第三方授权登陆以全部完成，现在只需要在前端页面添加上对应的链接即可\\r\\n\\r\\n`<a href=\\"{{url(''auth/socialite_ali/alipay'')}}\\" title=\\"使用支付宝快速登录\\"><img src=\\"{{asset(''支付宝图标'')}}\\" alt=\\"\\"></a>`\\r\\n\\r\\n> 补上token函数\\r\\n\\r\\n<code>\\r\\n\\r\\n    /**\\r\\n     * 生成一个随机的token值\\r\\n     * @param int $len\\r\\n     * @param bool $md5\\r\\n     * @return bool|string\\r\\n     */\\r\\n    function genToken( $len = 32, $md5 = true ) {\\r\\n\\r\\n        mt_srand( (double)microtime()*1000000 );\\r\\n\\r\\n        $chars = array(\\r\\n            ''Q'', ''@'', ''8'', ''y'', ''%'', ''^'', ''5'', ''Z'', ''('', ''G'', ''_'', ''O'', ''`'',\\r\\n            ''S'', ''-'', ''N'', ''<'', ''D'', ''{'', ''}'', ''['', '']'', ''h'', '';'', ''W'', ''.'',\\r\\n            ''/'', ''|'', '':'', ''1'', ''E'', ''L'', ''4'', ''&'', ''6'', ''7'', ''#'', ''9'', ''a'',\\r\\n            ''A'', ''b'', ''B'', ''~'', ''C'', ''d'', ''>'', ''e'', ''2'', ''f'', ''P'', ''g'', '')'',\\r\\n            ''?'', ''H'', ''i'', ''X'', ''U'', ''J'', ''k'', ''r'', ''l'', ''3'', ''t'', ''M'', ''n'',\\r\\n            ''='', ''o'', ''+'', ''p'', ''F'', ''q'', ''!'', ''K'', ''R'', ''s'', ''c'', ''m'', ''T'',\\r\\n            ''v'', ''j'', ''u'', ''V'', ''w'', '','', ''x'', ''I'', ''$'', ''Y'', ''z'', ''*''\\r\\n        );\\r\\n\\r\\n        $numChars = count($chars) - 1; $token = '''';\\r\\n\\r\\n        for ( $i=0; $i<$len; $i++ )\\r\\n            $token .= $chars[ mt_rand(0, $numChars) ];\\r\\n\\r\\n        if ( $md5 ) {\\r\\n\\r\\n            $chunks = ceil( strlen($token) / 32 ); $md5token = '''';\\r\\n\\r\\n            for ( $i=1; $i<=$chunks; $i++ )\\r\\n\\r\\n                $md5token .= md5( substr($token, $i * 32 - 32, 32) );\\r\\n\\r\\n            $token = substr($md5token, 0, $len);\\r\\n        } return $token;\\r\\n    }\\r\\n\\r\\n</code>\\r\\n\\r\\n`End`","html":"<h3>支付宝第三方授权登陆</h3>\\n<blockquote>\\n<p>说明：支付宝第三方授权登陆需要的一些必要参数，此处不做具体说明，有不明白可以自行百度或者查看官方文档<a href=\\"https://docs.open.alipay.com/common/105193\\">官方参考地址：https://docs.open.alipay.com/common/105193</a></p>\\n</blockquote>\\n<blockquote>\\n<p>此处做一个简单获取说明：</p>\\n</blockquote>\\n<blockquote>\\n<ul>\\n<li>登录支付宝开放平台。<a href=\\"https://open.alipay.com\\">官方地址：https://open.alipay.com</a>，进入开发者中心，创建应用，并申请应用上线，选择 获取会员信息功能。</li>\\n</ul>\\n</blockquote>\\n<blockquote>\\n<ul>\\n<li>设置 授权回调路径 和 接口加签方式（选择RSA2(SHA256)密钥）</li>\\n</ul>\\n</blockquote>\\n<blockquote>\\n<ul>\\n<li>密钥 生成 需要下载支付宝提供的生成工具。<a href=\\"https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7386797.0.0.iZGFov&amp;treeId=291&amp;articleId=105971&amp;docType=1\\">工具链接：https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7386797.0.0.iZGFov&amp;treeId=291&amp;articleId=105971&amp;docType=1</a>；因为我们用的是PHP版本，所以格式选择非java，长度选择2048，生成秘钥后绑定到支付宝开发中心。</li>\\n</ul>\\n</blockquote>\\n<ol>\\n<li>首先需要到阿里官方下载对应的SDK，我们用的是PHP，所以选择PHP版本下载，<a href=\\"https://docs.open.alipay.com/54/103419\\">参考地址：https://docs.open.alipay.com/54/103419</a>，解压后，复制下面4个文件</li>\\n</ol>\\n<p><img src=\\"/uploads/markdown/akldfghkbajkhrg.png\\" alt=\\"file\\" /></p>\\n<ol start=\\"2\\">\\n<li>因为需要引入第三方SDK，为了方便，在app目录下新建<code>Libs</code>文件夹，再在Libs目录下新建<code>AlipayAop</code>文件夹，之后将之前复制的4个文件放在<code>AlipayAop</code>目录下；为了方便引用SDK中的类，我们在项目根目录的<code>conposer.json</code>文件中，找到图片对应的位置，添加上<code>app/Libs/</code>，使其能随着项目自动加载</li>\\n</ol>\\n<p><img src=\\"/uploads/markdown/jsdfbgsadkfjgbk.png\\" alt=\\"file\\" /></p>\\n<blockquote>\\n<p>此处可能会出现一个tmp问题，解决办法：在<code>app/Libs/AlipayAop/lotusphp_runtime</code>文件夹下新建一个新的文件夹<code>tmp</code>；</p>\\n</blockquote>\\n<blockquote>\\n<p>如果是本地环境，要进行正常访问的话，可能需要修改支付宝SDK的入口文件<code>AopSdk.php</code>，具体修改如下图</p>\\n</blockquote>\\n<blockquote>\\n<p><img src=\\"/uploads/markdown/ajhrkbjdfgjshfbg.png\\" alt=\\"file\\" /></p>\\n</blockquote>\\n<blockquote>\\n<p>如果没有出现问题的话，此处可以略过。</p>\\n</blockquote>\\n<ol start=\\"3\\">\\n<li>相关参数配置，为了方便，我们在<code>config</code>文件夹下新建一个新的配置文件<code>auth_alipay.php</code>，具体内容为：</li>\\n</ol>\\n\\n<pre><code>return [\\n''alipay'' =&gt; [\\n        ''app_id'' =&gt; ''your_app_id'',\\n        ''scope'' =&gt; ''auth_userinfo'',//接口权限值，目前只支持auth_userinfo(获取用户详细信息，需要用户授权)和auth_base(只能获取到用户在支付宝中的userID)两个值\\n        ''redirect'' =&gt; ''http://www.example.com/auth/socialite_ali/alipay/callback'',//回调地址\\n\\n        ''privateKey'' =&gt; ''之前工具生成的应用私钥（很长的一段字符串）'',//商户应用私钥\\n\\n        ''publicKey'' =&gt; ''之前工具生成的应用公钥'',//商户应用公钥\\n\\n    ],\\n];\\n</code></pre>\\n\\n<ol start=\\"4\\">\\n<li>参数配置完成后，下面开始正戏；此处我们还是使用laravel的服务提供者模式，此模式具体设置方法，此处不做说明，有不清楚的请查看laravel官方文档或者本人的上一篇文章 <em><a href=\\"http://www.fanrenos.com/blog/php-zhong-wen-zhuan-pin-yin\\">PHP中文转拼音</a></em>。</li>\\n</ol>\\n<ul>\\n<li>首先创建新的Services类，在<code>app\\\\Services</code>目录下，新建一个新的类<code>AuthAliPayService</code>，具体类容如下：</li>\\n</ul>\\n\\n<pre><code>namespace App\\\\Services;\\nuse Symfony\\\\Component\\\\HttpFoundation\\\\RedirectResponse;\\n//引入的SDK\\nrequire (app_path() . ''/Libs/AlipayAop/AopSdk.php'');\\nuse AlipayAop\\\\aop\\\\AopClient;\\nuse AlipayAop\\\\aop\\\\request\\\\AlipaySystemOauthTokenRequest;\\nuse AlipayAop\\\\aop\\\\request\\\\AlipayUserUserinfoShareRequest;\\n\\n/**\\n* 支付宝第三方授权\\n*/\\nclass AuthAliPayService\\n{\\n    function __construct()\\n    {\\n\\t$this-&gt;app_id = config(''auth_alipay.alipay.app_id'');\\n\\t$this-&gt;scope = config(''auth_alipay.alipay.scope'');\\n\\t$this-&gt;redirect = config(''auth_alipay.alipay.redirect'');\\n\\t$this-&gt;privateKey = config(''auth_alipay.alipay.privateKey'');\\n\\t$this-&gt;publicKey = config(''auth_alipay.alipay.publicKey'');\\n\\t$this-&gt;token_uri = ''https://openapi.alipay.com/gateway.do'';\\n    }\\n\\n/**\\n     * {@inheritdoc}.\\n     * 返回授权的完整路由\\n     * @see \\\\Laravel\\\\Socialite\\\\Two\\\\AbstractProvider::getAuthUrl()\\n     */\\n    protected function getAuthUrl($state)\\n    {\\n        return $this-&gt;buildAuthUrlFromBase(''https://openauth.alipay.com/oauth2/publicAppAuthorize.htm'', $state);\\n    }\\n\\n    /**\\n     * {@inheritdoc}.\\n     * 设置正确的url参数\\n     */\\n    protected function buildAuthUrlFromBase($url, $state)\\n    {\\n        $query = http_build_query($this-&gt;getCodeFields($state));\\n\\n        return $url.''?''.$query;\\n    }\\n\\n    /**\\n     * {@inheritdoc}.\\n     * 授权路由需要的参数\\n     */\\n    protected function getCodeFields($state = null)\\n    {\\n        return [\\n            ''app_id'' =&gt; $this-&gt;app_id,\\n            ''redirect_uri'' =&gt; $this-&gt;redirect,\\n            ''scope'' =&gt; $this-&gt;scope,\\n            ''state'' =&gt; $state,\\n        ];\\n    }\\n\\n    /**\\n     * 跳转到支付宝授权页面\\n     * @return [type] [description]\\n     */\\n    public function redirect($state){\\n\\t$url = $this-&gt;getAuthUrl($state);\\n\\treturn new RedirectResponse($url);\\n    }\\n\\n    /**\\n     * 获取用户支付宝信息\\n     * @param  [type] $auth_code [description]\\n     * @return [type]            [description]\\n     */\\n    public function user($auth_code){\\n\\t//初始化\\n\\t$aop = new \\\\AopClient();\\n\\t$aop-&gt;gatewayUrl = $this-&gt;token_uri;\\n\\t$aop-&gt;appId = $this-&gt;app_id;\\n\\t$aop-&gt;rsaPrivateKey = $this-&gt;privateKey;\\n\\t$aop-&gt;alipayrsaPublicKey = $this-&gt;publicKey;\\n\\t$aop-&gt;apiVersion = ''1.0'';\\n\\t$aop-&gt;signType = ''RSA2'';\\n\\t$aop-&gt;postCharset=''UTF-8'';\\n\\t$aop-&gt;format=''json'';\\n\\n\\t//获取access_token\\n\\t$request = new \\\\AlipaySystemOauthTokenRequest();\\n\\t$request-&gt;setGrantType(&quot;authorization_code&quot;);\\n\\t$request-&gt;setCode($auth_code);//这里传入 code\\n\\t$result = $aop-&gt;execute($request);\\n\\t$responseNode = str_replace(&quot;.&quot;, &quot;_&quot;, $request-&gt;getApiMethodName()) . &quot;_response&quot;;\\n\\t$access_token = $result-&gt;$responseNode-&gt;access_token;\\n\\n\\t//获取用户信息\\n\\t$request_a = new \\\\AlipayUserUserinfoShareRequest();\\n\\t$result_a = $aop-&gt;execute ($request_a,$access_token); //这里传入获取的access_token\\n\\t$responseNode_a = str_replace(&quot;.&quot;, &quot;_&quot;, $request_a-&gt;getApiMethodName()) . &quot;_response&quot;;\\n\\n\\t$user_id = $result_a-&gt;$responseNode_a-&gt;alipay_user_id;   //用户唯一id\\n\\t$headimgurl = empty($result_a-&gt;$responseNode_a-&gt;avatar) ? NULL : $result_a-&gt;$responseNode_a-&gt;avatar;   //用户头像\\n\\t$nick_name = empty($result_a-&gt;$responseNode_a-&gt;nick_name) ? NULL : $result_a-&gt;$responseNode_a-&gt;nick_name;    //用户昵称\\n\\t$gender = $result_a-&gt;$responseNode_a-&gt;gender;//用户性别\\n\\tif($gender==''m''){\\n\\t\\t$sex = ''男'';\\n\\t}else if($gender==''f''){\\n\\t\\t$sex = ''女'';\\n\\t}else{\\n\\t\\t$sex = NULL;\\n\\t}\\n\\n\\t//文档：https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.v7xVPE&amp;treeId=53&amp;articleId=104114&amp;docType=1\\n\\t$user = [\\n\\t\\t''user_id'' =&gt; $user_id,\\n\\t\\t''nick_name'' =&gt; $nick_name,\\n\\t\\t''avatar'' =&gt; $headimgurl,\\n\\t\\t''gender'' =&gt; $sex,\\n\\t];\\n\\treturn $user;\\n    }\\n}\\n</code></pre>\\n\\n<ul>\\n<li>使用命令<code>php artisan make:provider AuthAliPayServiceProvider</code>，创建新的Provider类，修改其中的<code>register</code>方法；</li>\\n</ul>\\n\\n<pre><code>use App\\\\Services\\\\AuthAliPayService;//新增\\npublic function register()\\n{\\n    $this-&gt;app-&gt;bind(''auth_alipay'', function () {\\n        return new AuthAliPayService();\\n    });\\n}\\n</code></pre>\\n\\n<ul>\\n<li>创建门面类，在<code>app\\\\Facades</code>目录下新建新的文件<code>AuthAliPayFacade</code>，内容为：</li>\\n</ul>\\n\\n<pre><code>namespace App\\\\Facades;\\n\\nuse Illuminate\\\\Support\\\\Facades\\\\Facade;\\n/**\\n * @see \\\\App\\\\Services\\\\AuthAliPayFacade\\n */\\nclass AuthAliPayFacade extends Facade\\n{\\n    /**\\n     * Get the registered name of the component.\\n     *\\n     * @return string\\n     */\\n    protected static function getFacadeAccessor()\\n    {\\n        return ''auth_alipay'';\\n    }\\n}\\n</code></pre>\\n\\n<ul>\\n<li>最终在<code>config\\\\app.php</code>文件中添加上对应的参数；</li>\\n</ul>\\n\\n<pre><code>''providers'' =&gt; [\\n    ...\\n    App\\\\Providers\\\\AuthAliPayServiceProvider::class,\\n];\\n''aliases'' =&gt; [\\n    ...\\n    ''AuthAlipay'' =&gt; App\\\\Providers\\\\AuthAliPayServiceProvider::class,//支付宝登陆授权\\n];\\n</code></pre>\\n\\n<h3>到此为止，必要代码布置完成，下面介绍使用方法</h3>\\n<ol>\\n<li>创建对应的路由</li>\\n</ol>\\n\\n<pre><code>Route::get(''auth/socialite_ali/alipay'',''Auth\\\\AliPayLoginController@redirectToAli'');//登陆跳转\\nRoute::get(''auth/socialite_ali/alipay/callback'',''Auth\\\\AliPayLoginController@handleAliCallback'');//回调路由\\n</code></pre>\\n\\n<ol start=\\"2\\">\\n<li>使用命令<code>php artisan make:controller Auth\\\\AliPayLoginController</code>创建对应的controller；controller具体名称和位置，请自行设置；</li>\\n</ol>\\n\\n<pre><code>namespace App\\\\Http\\\\Controllers\\\\Auth;\\n\\nuse Illuminate\\\\Http\\\\Request;\\nuse AuthAlipay;\\nuse App\\\\User;\\nuse Auth;\\n\\nuse App\\\\Http\\\\Requests;\\nuse App\\\\Http\\\\Controllers\\\\Controller;\\n\\nclass AliPayLoginController extends Controller\\n{\\n    /**\\n     * Display a listing of the resource.\\n     *\\n     * @return \\\\Illuminate\\\\Http\\\\Response\\n     */\\n    public function redirectToAli(Request $request)\\n    {\\n        $time = time();\\n        $token = genToken(32).$time;//genToken()主要是用于创建一个唯一token；此参数主要是为了创建一个可以标识的唯一参数，用于验证阿里服务器返回的参数是否正确；你可以换成你自己的函数，PHP自带的随机生成函数都是可以的，如果有需要的，我会在文章末尾贴出该函数\\n        $request-&gt;session()-&gt;put($token,$token);\\n        //return AuthAlipay::redirect($token);\\n        return app(''auth_alipay'')-&gt;redirect($token);\\n    }\\n\\n    public function handleAliCallback(Request $request)\\n    {\\n        //验证链接是否正确\\n        $status = $request-&gt;get(''state'');\\n\\n        if($request-&gt;session()-&gt;has($status) &amp;&amp; $request-&gt;session()-&gt;get($status)==$status){\\n\\n            $request-&gt;session()-&gt;forget($status);//删除session\\n\\n            $auth_code = $request-&gt;get(''auth_code'');\\n\\n            //使用auth_code换取接口access_token及用户userId以及其他的一些信息\\n            $user = app(''auth_alipay'')-&gt;user($auth_code);\\n\\n            $user_id = $user[''user_id''];//支付宝授权用户唯一id\\n\\n            $nick_name = empty($user[''nick_name'']) ? NULL : $user[''nick_name''];\\n\\n            $avatar = empty($user[''avatar'']) ? NULL : $user[''avatar''];//头像暂时先不动\\n\\n            $gender = $user[''gender''];\\n\\n            //判断是否是第一次登陆\\n            //先判断当前用户是否已经登录了\\n            if(!Auth::guest()){\\n\\n                //已经登录了，执行绑定操作\\n                $u_id = Auth::user()-&gt;user_id;\\n\\n                //先判断当前的第三方是否已经绑定了\\n                $is_binding = User::where(''user_zhifubao'',$user_id)-&gt;first();\\n\\n                if(!$is_binding){\\n\\n                    User::where(''user_id'',$u_id)-&gt;update([''user_zhifubao'' =&gt; $user_id,]);\\n\\n                }else{\\n\\n                    return redirect(''userorder/userinfo?order-style=personalInfo'')-&gt;withErrors(''此支付宝账号已经注册过或绑定过本平台账号，请换个支付宝账号进行绑定或使用该账号进行重新登陆！'');\\n\\n                }\\n\\n                return redirect(''userorder/userinfo?order-style=personalInfo'');\\n\\n            }else{\\n\\n                $is_binding = User::where(''user_zhifubao'',$user_id)-&gt;first();\\n\\n                if($is_binding){\\n\\n                    $u_id = $is_binding-&gt;user_id;\\n\\n                }else{\\n\\n                    $time = time();\\n\\n                    //否则以当前第三方信息，创建一个新的用户信息\\n                    $data = [\\n                        ''user_email'' =&gt; NULL,\\n                        ''user_phone'' =&gt; NULL,\\n                        ''user_zhifubao'' =&gt; $user_id,\\n                        ''user_password'' =&gt; NULL,\\n                        ''user_type'' =&gt; ''1'',\\n                        ''user_level'' =&gt;''VIP0'',\\n                        ''user_gender'' =&gt; $gender,\\n                        ''user_points'' =&gt; 1000,\\n                        ''user_isfetch_register'' =&gt; 1,\\n                        ''user_createtime'' =&gt; $time,\\n                        ''user_fromdevice'' =&gt; 3,\\n                        ''user_nickname'' =&gt; $nick_name\\n                    ];\\n\\n                    $u_id = DB::table(''trs_user'')-&gt;insertGetId($data);\\n                }\\n\\n                //通过用户ID直接进行认证\\n                Auth::loginUsingId($u_id);\\n                //登陆成功后，跳转到之前的页面\\n                return redirect()-&gt;intended(''/'');\\n            }\\n        }else{\\n            return redirect(''auth/login'')-&gt;withErrors(''网络或认证信息出错，请重试！'');\\n        }\\n    }\\n}\\n</code></pre>\\n\\n<ol start=\\"3\\">\\n<li>至此，在laravel上进行支付宝第三方授权登陆以全部完成，现在只需要在前端页面添加上对应的链接即可</li>\\n</ol>\\n<p><code>&lt;a href=&quot;{{url(''auth/socialite_ali/alipay'')}}&quot; title=&quot;使用支付宝快速登录&quot;&gt;&lt;img src=&quot;{{asset(''支付宝图标'')}}&quot; alt=&quot;&quot;&gt;&lt;/a&gt;</code></p>\\n<blockquote>\\n<p>补上token函数</p>\\n</blockquote>\\n\\n<pre><code>/**\\n * 生成一个随机的token值\\n * @param int $len\\n * @param bool $md5\\n * @return bool|string\\n */\\nfunction genToken( $len = 32, $md5 = true ) {\\n\\n    mt_srand( (double)microtime()*1000000 );\\n\\n    $chars = array(\\n        ''Q'', ''@'', ''8'', ''y'', ''%'', ''^'', ''5'', ''Z'', ''('', ''G'', ''_'', ''O'', ''`'',\\n        ''S'', ''-'', ''N'', ''&lt;'', ''D'', ''{'', ''}'', ''['', '']'', ''h'', '';'', ''W'', ''.'',\\n        ''/'', ''|'', '':'', ''1'', ''E'', ''L'', ''4'', ''&amp;'', ''6'', ''7'', ''#'', ''9'', ''a'',\\n        ''A'', ''b'', ''B'', ''~'', ''C'', ''d'', ''&gt;'', ''e'', ''2'', ''f'', ''P'', ''g'', '')'',\\n        ''?'', ''H'', ''i'', ''X'', ''U'', ''J'', ''k'', ''r'', ''l'', ''3'', ''t'', ''M'', ''n'',\\n        ''='', ''o'', ''+'', ''p'', ''F'', ''q'', ''!'', ''K'', ''R'', ''s'', ''c'', ''m'', ''T'',\\n        ''v'', ''j'', ''u'', ''V'', ''w'', '','', ''x'', ''I'', ''$'', ''Y'', ''z'', ''*''\\n    );\\n\\n    $numChars = count($chars) - 1; $token = '''';\\n\\n    for ( $i=0; $i&lt;$len; $i++ )\\n        $token .= $chars[ mt_rand(0, $numChars) ];\\n\\n    if ( $md5 ) {\\n\\n        $chunks = ceil( strlen($token) / 32 ); $md5token = '''';\\n\\n        for ( $i=1; $i&lt;=$chunks; $i++ )\\n\\n            $md5token .= md5( substr($token, $i * 32 - 32, 32) );\\n\\n        $token = substr($md5token, 0, $len);\\n    } return $token;\\n}\\n</code></pre>\\n\\n<p><code>End</code></p>\\n"}', '', '在laravel框架实现支付宝第三方授权登陆并获取对应的用户信息', 1, 0, 0, '2017-09-02 02:00:00', '2017-09-02 03:09:03', '2017-09-02 03:31:19', NULL),
(14, 5, 'laravel-chuang-jian-quan-ju-bang-zhu-han-shu', 'Laravel创建全局帮助函数', '在Laravel框架中创建全局帮助函数，可以在任意地方被调用', '{"raw":"### Laravel全局帮助函数\\r\\n\\r\\n1. 为了方便，我们在app文件夹下新建一个`Helps`文件夹，并在该文件夹下新建一个`function.php`文件，如图所示：\\r\\n\\r\\n![file](/uploads/markdown/askeuhwrfgbhjka.png)\\r\\n\\r\\n2. 找到项目的根目录，修改`bootstrap`文件夹下的`autoload.php`文件，在文件中新增加一行代码\\r\\n\\r\\n<code>\\r\\n\\r\\n    require __DIR__.''/../app/Helps/function.php'';\\r\\n\\r\\n</code>\\r\\n\\r\\n具体效果如图：\\r\\n\\r\\n![file](/uploads/markdown/jfhdkvbakdgmod.png)\\r\\n\\r\\n3. 到此为止，已经全部完成，我们先做个测试，在`function.php`文件中，我们添加一个简单的函数，如下：\\r\\n\\r\\n<code>\\r\\n\\r\\n    /**\\r\\n     * 获取查询sku的sql语句\\r\\n     * @param $date\\r\\n     * @return string\\r\\n     */\\r\\n    function setSkuSql($date){\\r\\n        $sql = ''IF(!ISNULL(sku.sku_start_time) AND !ISNULL(sku.sku_end_time),IF(sku.sku_start_time<''.$date.'' AND sku.sku_end_time>''.$date.'',IF(!ISNULL(sku.sku_sell_activity_price),sku.sku_sell_activity_price,sku.sku_sell_price),sku.sku_sell_price),sku.sku_sell_price) AS last_price'';\\r\\n        return $sql;\\r\\n    }\\r\\n\\r\\n</code>\\r\\n\\r\\n4. 然后在任意的地方使用，不仅仅局限于Controller中，如下\\r\\n\\r\\n<code>\\r\\n    \\r\\n    $sql = setSkuSql(time());\\r\\n    $query_sku = ''条件'';\\r\\n    $query = ''条件'';\\r\\n    $products = DB::table(''trs_products as pr'')\\r\\n              ->leftJoin(''trs_product_sku as sku'',''pr.product_id'',''='',''sku.sku_product_id'')\\r\\n              ->selectRaw(''pr.*,sku.sku_price,sku.sku_stock,''.$sql)\\r\\n              ->whereRaw($query_sku.'' and ''.$query)\\r\\n              ->WhereNull(''deleted_at'')\\r\\n              ->orderby(''last_price'',''desc'')->paginate(15);\\r\\n\\r\\n</code>\\r\\n\\r\\n`End`\\r\\n","html":"<h3>Laravel全局帮助函数</h3>\\n<ol>\\n<li>为了方便，我们在app文件夹下新建一个<code>Helps</code>文件夹，并在该文件夹下新建一个<code>function.php</code>文件，如图所示：</li>\\n</ol>\\n<p><img src=\\"/uploads/markdown/askeuhwrfgbhjka.png\\" alt=\\"file\\" /></p>\\n<ol start=\\"2\\">\\n<li>找到项目的根目录，修改<code>bootstrap</code>文件夹下的<code>autoload.php</code>文件，在文件中新增加一行代码</li>\\n</ol>\\n\\n<pre><code>require __DIR__.''/../app/Helps/function.php'';\\n</code></pre>\\n\\n<p>具体效果如图：</p>\\n<p><img src=\\"/uploads/markdown/jfhdkvbakdgmod.png\\" alt=\\"file\\" /></p>\\n<ol start=\\"3\\">\\n<li>到此为止，已经全部完成，我们先做个测试，在<code>function.php</code>文件中，我们添加一个简单的函数，如下：</li>\\n</ol>\\n\\n<pre><code>/**\\n * 获取查询sku的sql语句\\n * @param $date\\n * @return string\\n */\\nfunction setSkuSql($date){\\n    $sql = ''IF(!ISNULL(sku.sku_start_time) AND !ISNULL(sku.sku_end_time),IF(sku.sku_start_time&lt;''.$date.'' AND sku.sku_end_time&gt;''.$date.'',IF(!ISNULL(sku.sku_sell_activity_price),sku.sku_sell_activity_price,sku.sku_sell_price),sku.sku_sell_price),sku.sku_sell_price) AS last_price'';\\n    return $sql;\\n}\\n</code></pre>\\n\\n<ol start=\\"4\\">\\n<li>然后在任意的地方使用，不仅仅局限于Controller中，如下</li>\\n</ol>\\n\\n<pre><code>$sql = setSkuSql(time());\\n$query_sku = ''条件'';\\n$query = ''条件'';\\n$products = DB::table(''trs_products as pr'')\\n          -&gt;leftJoin(''trs_product_sku as sku'',''pr.product_id'',''='',''sku.sku_product_id'')\\n          -&gt;selectRaw(''pr.*,sku.sku_price,sku.sku_stock,''.$sql)\\n          -&gt;whereRaw($query_sku.'' and ''.$query)\\n          -&gt;WhereNull(''deleted_at'')\\n          -&gt;orderby(''last_price'',''desc'')-&gt;paginate(15);\\n</code></pre>\\n\\n<p><code>End</code></p>\\n"}', '', '在Laravel框架中创建全局帮助函数，可以在任意地方被调用，非常方便', 1, 0, 0, '2017-09-02 06:30:00', '2017-09-02 06:36:07', '2017-09-02 06:43:42', NULL);
INSERT INTO `articles` (`id`, `category_id`, `slug`, `title`, `subtitle`, `content`, `page_image`, `meta_description`, `is_original`, `is_draft`, `view_count`, `published_at`, `created_at`, `updated_at`, `deleted_at`) VALUES
(15, 7, 'laravel-tu-pian-shang-chuan-lei', 'laravel图片上传类', '做一个Laravel图片上传类，专门用于上传图片的类', '{"raw":"### Laravel图片上传类，专门用于上传图片\\r\\n\\r\\n1. 准备工作，需要用到`intervention/image`扩展，请自行安装，并配置好，此处推荐用composer安装；\\r\\n\\r\\n  > `composer require intervention/image`\\r\\n\\r\\n2. 请参考本人上一篇文章 _[Laravel创建全局帮助函数](http://www.fanrenos.com/blog/laravel-chuang-jian-quan-ju-bang-zhu-han-shu)_ 创建好能全局调用的帮助函数，如果不想安照本人的办法，请自行选择，到时只需将文中需要调用函数的部分，换成你自己的函数即可。\\r\\n\\r\\n### 本文以常用的商品图为例（单尺寸图，可以参考本文自行修改，添加一个新的方法即可）\\r\\n\\r\\n#### 因为每个人对图片每个尺寸的想法不同，对于多尺寸图片的存储问题也就不同，我这边只介绍我本人的处理方法，对于多尺寸图，我一律以创建`100x100`文件夹的形式来存储图片，效果如图：\\r\\n\\r\\n![file](/uploads/markdown/asujykdfbasjryfg.png)\\r\\n\\r\\n1. 理解存储路径，下面就开始进行开工了\\r\\n\\r\\n  - 因为打算是作为共用类使用，以依赖注入的方式调用它，为了方便，我们首先在app文件夹下新增一个`Image`文件夹，在此文件夹下，再新建`ImageRepository.php`文件，当做一个图片处理类，内容如下：\\r\\n\\r\\n<code>\\r\\n\\r\\n    namespace App\\\\Image;\\r\\n\\r\\n    use Response;\\r\\n    use Illuminate\\\\Http\\\\Request;\\r\\n    use File;\\r\\n    use Image;\\r\\n    use Auth;\\r\\n\\r\\n    class ImageRepository{\\r\\n        /**\\r\\n         * [upload description]            生成商品主图\\r\\n         * @param  array  $all_photo       包含的图片集合对象\\r\\n         * @param  [type] $date            存入数据库时，与图片名拼接的路径元素，如（日期/图片名，uid/图片名，等等）\\r\\n         * @param  [type] $upload_path     本地上传图片的路径（不包含日期）\\r\\n         * @param  [type] $ftp_upload_path 阿里云服务器，图片上传的路径（不包含日期）\\r\\n         * @param  [type] $path_size       商品图需要生成的尺寸\\r\\n         * @return [type] Array()          包含图片信息的数组元素\\r\\n         */\\r\\n        public function uploadProduct($all_photo,$date,$upload_path,$ftp_upload_path,$path_size){\\r\\n            $file_info = $this->uploadProductLoacl($all_photo,$date,$upload_path,$path_size);\\r\\n            //将图片批量上传到服务器\\r\\n            $file_name = $file_info[0];\\r\\n            foreach ($file_name as $key => $value) {\\r\\n                //批量上传，需要补全服务器的图片上传路径（把日期等信息补全）\\r\\n                uploadcurl($value,$ftp_upload_path.$key.''x''.$key.''/''.$date.''/'');\\r\\n            }\\r\\n\\r\\n            //返回的上传图片信息\\r\\n            $filename_arr = $file_info[1];\\r\\n\\r\\n            return $filename_arr;\\r\\n        }\\r\\n        /**\\r\\n         * 商品主图，本地上传\\r\\n         * @param  [type] $all_photo   [description]\\r\\n         * @param  [type] $date        [description]\\r\\n         * @param  [type] $upload_path [description]\\r\\n         * @param  [type] $path_size   [description]\\r\\n         * @return [type]              用于批量上传及用于存储数据库的图片信息\\r\\n         */\\r\\n        public function uploadProductLoacl($all_photo,$date,$upload_path,$path_size){\\r\\n            $file_name = $filename_arr = array();//用于批量上传的本地图片路径集合//上传完成后返回的图片信息\\r\\n            foreach ($all_photo as $key => $photo) {\\r\\n                if(empty($photo)){\\r\\n                    $filename_arr[] = NULL;\\r\\n                }else{\\r\\n                    $originalName = $photo->getClientOriginalName();\\r\\n                    //取得图片的后缀\\r\\n                    $pfix = $photo->getClientOriginalExtension();\\r\\n                    $originalNameWithoutExt = substr($originalName, 0, strlen($originalName) - 4);\\r\\n                    $filename = sanitize($originalNameWithoutExt);\\r\\n                    //自定义图片名称（路径随意选择一个尺寸即可，每个尺寸下的图片名称都是一样的）\\r\\n                    $pic_name = createUniqueFilename($upload_path.''800x800/''.$date.''/'',$filename,$pfix);\\r\\n\\r\\n                    $filenameExt = $pic_name .''.''.$pfix;\\r\\n\\r\\n                    //原图（等上传完毕，会删除此图），最终只会保留3套商品主图\\r\\n                    $original_pic = Image::make( $photo )->save($upload_path.''normal_''.$filenameExt);\\r\\n\\r\\n                    $origi_w = $original_pic->width();\\r\\n                    $origi_h = $original_pic->height();\\r\\n\\r\\n                    foreach ($path_size as $k => $v) {\\r\\n                        $new_w_h = getNewPicWH($k,$k,$origi_w,$origi_h);\\r\\n                        $image = Image::make($original_pic)\\r\\n                                ->resize($new_w_h[0],$new_w_h[1])\\r\\n                                ->save($upload_path.$v.$filenameExt );\\r\\n\\r\\n                        if($image){\\r\\n                            $file_name[$k][] = $upload_path.$v.$filenameExt;//保存每个图片路径，用于图片批量上传到服务器\\r\\n                        }\\r\\n                    }\\r\\n                    $filename_arr[] = $date.''/''.$filenameExt;//返回的图片信息，用于存入数据库中\\r\\n                    //上传成功，删除最开始的原始图\\r\\n                    unlink($upload_path.''normal_''.$filenameExt);//删除原始图\\r\\n                }\\r\\n            }\\r\\n            return array($file_name,$filename_arr);\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * 删除商品主图\\r\\n         * @param  [type] $path      本地路径\\r\\n         * @param  [type] $ftp_path  服务器路径\\r\\n         * @param  [type] $file_info 数据库图片信息string或array（日期/文件名）\\r\\n         * @param  [type] $size      商品图的图片尺寸数组集合array(80,180,...)\\r\\n         * @return [type]            [description]\\r\\n         */\\r\\n        public function deleteProduct($path,$ftp_path, $file_info,$size){\\r\\n            //商品图删除\\r\\n            $del_path = getSqlSizePath($path,$ftp_path,$size,$file_info);\\r\\n            foreach ($del_path[''local''] as $key => $value) {\\r\\n                if(File::exists($value)){\\r\\n                    File::delete($value);\\r\\n                }\\r\\n            }\\r\\n            delpic($del_path[''ftp'']);\\r\\n\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n</code>\\r\\n\\r\\n2. 目前先写这么多，里面调用的一些函数，会在文章末尾处添加，此类里面有一些上传到远程服务器的代码，如果仅仅是作为本地上传，可以注释掉远程上传的方法，远程服务器的上传函数也会在文章末尾贴出。\\r\\n\\r\\n### 开始使用\\r\\n\\r\\n1. 使用命令`php artisan make:controller GoodsController`新建一个Controller，名称自行修改；\\r\\n\\r\\n2. 举例说明，先设置下配置文件，在config文件夹下新建一个新的文件`base_up_imgs.php`,内容：\\r\\n\\r\\n<code>\\r\\n\\r\\n    return [\\r\\n        ''base_size_path'' => base_path(''storage/uploads/''),//上传目录，可以自行修改\\r\\n        ''size'' => [800,480,180,80],//尺寸大小顺序必须从大到小依次递减（不然图片会失真）\\r\\n    ];\\r\\n\\r\\n</code>\\r\\n\\r\\n`GoodsController正文`\\r\\n\\r\\n<code>\\r\\n    \\r\\n    //省略其他引用\\r\\n    use App\\\\Image\\\\ImageRepository;\\r\\n    use File;\\r\\n    class GoodsController extends Controller\\r\\n    {\\r\\n        public function __construct($path = ''images/product/'', $remote = ''/product/'')\\r\\n        {\\r\\n            $this->date = date(''Y-m-d'', time());//路径带不带日期可自行考虑，如果不想添加可以注释掉，再修改下ImageRepository类里面对应的参数设置，可以添加个判断\\r\\n            $this->upload_path = config(''base_up_imgs.base_size_path'') . $path;//本地存储目录\\r\\n            $this->upload_ftp_path = $remote;//需要远程上传才会用到该参数\\r\\n\\r\\n            $this->size = config(''base_up_imgs.size'');\\r\\n            $this->path_size = getSizePath($this->size,$this->date);//对尺寸数据的一点处理，方法会在文末贴出\\r\\n        }\\r\\n        \\r\\n        /**\\r\\n         * Store a newly created resource in storage.\\r\\n         * 上传\\r\\n         * @param  \\\\Illuminate\\\\Http\\\\Request $request\\r\\n         * @return \\\\Illuminate\\\\Http\\\\Response\\r\\n         */\\r\\n        public function store(Request $request, ImageRepository $imageRepository)\\r\\n        {\\r\\n            $comment_img = NULL;\\r\\n            if ($request->hasFile(''upload_images'')) {\\r\\n\\r\\n                checkdir($this->upload_path, $this->upload_ftp_path ,$this->path_size);//检查对应的目录是否存在，否则就创建\\r\\n\\r\\n                $gc_icon_app = $request->file(''upload_images'');\\r\\n                $com_img = $imageRepository->uploadProduct($gc_icon_app, $this->date, $this->upload_path, $this->upload_ftp_path,$this->path_size);\\r\\n                $comment_img = json_encode($com_img, 320);//稍微整理下图片信息\\r\\n            }\\r\\n            dd($comment_img);\\r\\n            //存储数据库操作，此处就不贴出来了，请自行处理\\r\\n        }\\r\\n    }\\r\\n\\r\\n</code>\\r\\n\\r\\n3. 使用部分到此就差不多结束了，后面是补充的一些函数方法，有需要的可以看看。\\r\\n\\r\\n> 函数部分\\r\\n\\r\\n<code>\\r\\n\\r\\n    /**\\r\\n     * 检测远程服务器是否存在某目录文件夹\\r\\n     * @return [type] [description]\\r\\n     */\\r\\n    function checkftpdir($remote){\\r\\n      header(''content-type:text/html;charset=utf8'');\\r\\n      $curl = curl_init();\\r\\n      $data = array(''path''=>$remote);\\r\\n      curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false); // 跳过证书检查\\r\\n      curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);  // 从证书中检查SSL加密算法是否存在，如果不是https服务器，可以注释掉这两行\\r\\n      curl_setopt($curl, CURLOPT_URL, \\"https://imgs.example.com/checkdir.php\\");//checkdir.php文件内容后面会贴出，此文件是放在远程的图片服务器的\\r\\n      curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\\r\\n      curl_setopt($curl, CURLOPT_POST, true);\\r\\n      curl_setopt($curl, CURLOPT_POSTFIELDS, $data);\\r\\n      $result = curl_exec($curl);\\r\\n      curl_close($curl);\\r\\n      return $result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * curl批量上传图片文件\\r\\n     * @param  [type] $local_files 本地图片集合\\r\\n     * @param  [type] $ftp_route   服务器存储路径\\r\\n     * @return [type]            [description]\\r\\n     */\\r\\n    function uploadcurl($local_files,$ftp_route){\\r\\n      $ch = curl_init();\\r\\n      $i = array();\\r\\n      foreach ($local_files as $key => $value) {\\r\\n        $i[] = $key;\\r\\n        if (class_exists(''\\\\CURLFile'')){\\r\\n          $post_data[''ftp_path''.$key] = new \\\\CURLFile($value); //php>5.4\\r\\n        }else{\\r\\n          $post_data[''ftp_path''.$key] = ''@''.$value; //php<=5.4\\r\\n        }\\r\\n      }\\r\\n      $post_data[''i''] = json_encode($i,320);\\r\\n      $post_data[''dir''] = $ftp_route;//服务器路径\\r\\n      curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // 跳过证书检查\\r\\n      curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);  // 从证书中检查SSL加密算法是否存在\\r\\n      curl_setopt($ch, CURLOPT_HEADER, false);\\r\\n      curl_setopt($ch, CURLOPT_POST, true);\\r\\n      curl_setopt($ch, CURLOPT_BINARYTRANSFER,true);\\r\\n      curl_setopt($ch, CURLOPT_POSTFIELDS,$post_data);\\r\\n      curl_setopt($ch, CURLOPT_URL, ''https://imgs.example.com/uploadcurl.php'');//正式服务器处理上传\\r\\n      //curl_setopt($ch, CURLOPT_INFILESIZE, filesize($file)); //这句非常重要，告诉远程服务器，文件大小\\r\\n      $info= curl_exec($ch);\\r\\n      curl_close($ch);\\r\\n\\r\\n      return $info;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * 删除远程服务器上对应的图片\\r\\n     * @param  [type] $remote_file [远程服务器上对应的图片路径]\\r\\n     * @return [type]              [description]\\r\\n     */\\r\\n    function delpic($del_file){\\r\\n      header(''content-type:text/html;charset=utf8'');\\r\\n      $curl = curl_init();\\r\\n      if(is_array($del_file)){\\r\\n        $data_path = json_encode($del_file);\\r\\n        $is_array = ''array'';\\r\\n      }else{\\r\\n        $data_path = $del_file;\\r\\n        $is_array = ''string'';\\r\\n      }\\r\\n\\r\\n      $data = array(''path''=>$data_path,''is_array''=>$is_array);\\r\\n      curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false); // 跳过证书检查\\r\\n      curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);  // 从证书中检查SSL加密算法是否存在\\r\\n      curl_setopt($curl, CURLOPT_URL, \\"https://imgs.example.com/delpic.php\\");\\r\\n      curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\\r\\n      curl_setopt($curl, CURLOPT_POST, true);\\r\\n      curl_setopt($curl, CURLOPT_POSTFIELDS, $data);\\r\\n      $result = curl_exec($curl);\\r\\n      curl_close($curl);\\r\\n      return $result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * 自定义图片名称\\r\\n     * @param  [type] $filename [description]\\r\\n     * @param  [type] $pfix     [description]\\r\\n     * @return [type]           [description]\\r\\n     */\\r\\n    function createUniqueFilename( $path,$filename,$pfix)\\r\\n    {\\r\\n        //自定义图片名称\\r\\n        $str = $filename.mt_rand(100000,999999);\\r\\n        $pic_name = mb_substr(md5($str),0,12);\\r\\n\\r\\n        $full_image_path = $path . $pic_name .''.''. $pfix;\\r\\n\\r\\n        if ( File::exists( $full_image_path ) )\\r\\n        {\\r\\n            // Generate token for image\\r\\n            $imageToken = substr(sha1(mt_rand()), 0, 5);\\r\\n            return $pic_name . ''-'' . $imageToken;\\r\\n        }\\r\\n\\r\\n        return $pic_name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * 检查本地及阿里服务器路径是否存在，否则就创建\\r\\n     * @param  [type] $path     [description]\\r\\n     * @param  [type] $ftp_path [description]\\r\\n     * @param  [type] $path_size 图片尺寸集合\\r\\n     * @return [type]           [description]\\r\\n     */\\r\\n    function checkdir($path,$ftp_path,$path_size=array()){\\r\\n      if(!empty($path_size)){\\r\\n        foreach ($path_size as $key => $size) {\\r\\n            if(!is_dir($path.$size)){\\r\\n                    @mkdir($path.$size,0777);\\r\\n            }\\r\\n            checkftpdir($ftp_path.$size);\\r\\n        }\\r\\n      }else{\\r\\n            if(!is_dir($path)){\\r\\n                    @mkdir($path,0777);\\r\\n            }\\r\\n            checkftpdir($ftp_path);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * 根据图片尺寸获取商品主图链接（用于新建文件夹及上传图片）\\r\\n     * @param  [type] $size [description]\\r\\n     * @param  [type] $date [description]\\r\\n     * @return [type]       [description]\\r\\n     */\\r\\n    function getSizePath($size,$date){\\r\\n        $size_path = array();\\r\\n        foreach ($size as $key => $value) {\\r\\n            $size_path[$value] = $value.''x''.$value.''/''.$date.''/'';\\r\\n        }\\r\\n        return $size_path;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * 根据尺寸，获取商品主图正确路径(用于删除)\\r\\n     * @param  [type] $path     [description]\\r\\n     * @param  [type] $ftp_path [description]\\r\\n     * @param  [type] $size     [description]\\r\\n     * @param  [type] $pic_info [description]\\r\\n     * @return [type]           [description]\\r\\n     */\\r\\n    function getSqlSizePath($path,$ftp_path,$size,$pic_info){\\r\\n        $new_path = array();\\r\\n        if(is_array($pic_info)){\\r\\n            foreach ($size as $key => $value) {\\r\\n                foreach ($pic_info as $k => $v) {\\r\\n                    $new_path[''local''][] = $path.$value.''x''.$value.''/''.$v;\\r\\n                    $new_path[''ftp''][] = $ftp_path.$value.''x''.$value.''/''.$v;\\r\\n                }\\r\\n            }\\r\\n        }else{\\r\\n            foreach ($size as $key => $value) {\\r\\n                $new_path[''local''][] = $path.$value.''x''.$value.''/''.$pic_info;\\r\\n                $new_path[''ftp''][] = $ftp_path.$value.''x''.$value.''/''.$pic_info;\\r\\n            }\\r\\n        }\\r\\n        return $new_path;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * 获取最适合的图片宽高\\r\\n     * @param  [type] $maxwidth   [图片最大宽]\\r\\n     * @param  [type] $maxheight  [图片最大高]\\r\\n     * @param  [type] $pic_width  [图片实际宽]\\r\\n     * @param  [type] $pic_height [图片实际高]\\r\\n     * @return [type] array()     [返回最新最合适的图片宽高]\\r\\n     */\\r\\n    function getNewPicWH($maxwidth,$maxheight,$pic_width,$pic_height){\\r\\n      $resizewidth_tag = false;\\r\\n      $resizeheight_tag = false;\\r\\n      if($maxwidth && $pic_width>$maxwidth)\\r\\n      {\\r\\n        $widthratio = $maxwidth/$pic_width;\\r\\n        $resizewidth_tag = true;\\r\\n      }\\r\\n\\r\\n      if($maxheight && $pic_height>$maxheight)\\r\\n      {\\r\\n        $heightratio = $maxheight/$pic_height;\\r\\n        $resizeheight_tag = true;\\r\\n      }\\r\\n\\r\\n      if($resizewidth_tag && $resizeheight_tag)\\r\\n      {\\r\\n        if($widthratio<$heightratio){\\r\\n          $ratio = $widthratio;\\r\\n        }else{\\r\\n          $ratio = $heightratio;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      if($resizewidth_tag && !$resizeheight_tag){\\r\\n        $ratio = $widthratio;\\r\\n      }\\r\\n      if($resizeheight_tag && !$resizewidth_tag){\\r\\n        $ratio = $heightratio;\\r\\n      }\\r\\n      if(!$resizeheight_tag && !$resizewidth_tag){\\r\\n        $ratio = 1;\\r\\n      }\\r\\n\\r\\n      $newwidth = $pic_width * $ratio;\\r\\n      $newheight = $pic_height * $ratio;\\r\\n\\r\\n      return array($newwidth,$newheight);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * 名称过滤\\r\\n     * @param  [type]  $string          [description]\\r\\n     * @param  boolean $force_lowercase [description]\\r\\n     * @param  boolean $anal            [description]\\r\\n     * @return [type]                   [description]\\r\\n     */\\r\\n    function sanitize($string, $force_lowercase = true, $anal = false)\\r\\n    {\\r\\n        $strip = array(\\"~\\", \\"`\\", \\"!\\", \\"@\\", \\"#\\", \\"$\\", \\"%\\", \\"^\\", \\"&\\", \\"*\\", \\"(\\", \\")\\", \\"_\\", \\"=\\", \\"+\\", \\"[\\", \\"{\\", \\"]\\",\\r\\n            \\"}\\", \\"\\\\\\\\\\", \\"|\\", \\";\\", \\":\\", \\"\\\\\\"\\", \\"''\\", \\"‘\\", \\"’\\", \\"“\\", \\"”\\", \\"–\\", \\"—\\",\\r\\n            \\"â€”\\", \\"â€“\\", \\",\\", \\"<\\", \\".\\", \\">\\", \\"/\\", \\"?\\");\\r\\n        $clean = trim(str_replace($strip, \\"\\", strip_tags($string)));\\r\\n        $clean = preg_replace(''/\\\\s+/'', \\"-\\", $clean);\\r\\n        $clean = ($anal) ? preg_replace(\\"/[^a-zA-Z0-9]/\\", \\"\\", $clean) : $clean ;\\r\\n\\r\\n        return ($force_lowercase) ?\\r\\n            (function_exists(''mb_strtolower'')) ?\\r\\n                mb_strtolower($clean, ''UTF-8'') :\\r\\n                strtolower($clean) :\\r\\n            $clean;\\r\\n    }\\r\\n\\r\\n</code>\\r\\n\\r\\n#### 涉及到的远程服务器的3个文件`checkdir.php`、`delpic.php`以及`uploadcurl.php`的内容分别为：\\r\\n\\r\\n<code>\\r\\n\\r\\n    if($_REQUEST) \\r\\n    {   \\r\\n        $path = dirname(__FILE__).$_REQUEST[''path''];\\r\\n        if(is_dir($path)===false){\\r\\n            @mkdir($path,0777);\\r\\n        }\\r\\n    }\\r\\n\\r\\n</code>\\r\\n\\r\\n<code>\\r\\n\\r\\n    if($_REQUEST) \\r\\n    {   \\r\\n        $path = $_REQUEST[''path''];\\r\\n        $is_array = $_REQUEST[''is_array''];\\r\\n        if($is_array==''array''){\\r\\n            $del_path = json_decode($path,true);\\r\\n            foreach ($del_path as $key => $value) {\\r\\n                $dir = dirname(__FILE__).$value;\\r\\n                if(file_exists($dir)){\\r\\n                    unlink($dir);\\r\\n                }\\r\\n            }\\r\\n        }else if($is_array==''string''){\\r\\n            $dir = dirname(__FILE__).$path;\\r\\n            if(file_exists($dir)){\\r\\n              unlink($dir);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n</code>\\r\\n\\r\\n<code>\\r\\n\\r\\n    if($_FILES){\\r\\n        \\r\\n        $path = dirname(__FILE__).$_REQUEST[''dir''];\\r\\n        $i = json_decode($_REQUEST[''i''],true);\\r\\n\\r\\n        if(is_dir($path)===false){\\r\\n            @mkdir($path,0777);\\r\\n        }\\r\\n        foreach ($i as $key => $value) {\\r\\n            $filename = $_FILES[''ftp_path''.$value][''name''];\\r\\n            $tmpname = $_FILES[''ftp_path''.$value][''tmp_name''];\\r\\n            move_uploaded_file($tmpname,$path.$filename);\\r\\n        }\\r\\n    }\\r\\n\\r\\n</code>\\r\\n\\r\\n`End`","html":"<h3>Laravel图片上传类，专门用于上传图片</h3>\\n<ol>\\n<li>准备工作，需要用到<code>intervention/image</code>扩展，请自行安装，并配置好，此处推荐用composer安装；</li>\\n</ol>\\n<blockquote>\\n<p><code>composer require intervention/image</code></p>\\n</blockquote>\\n<ol start=\\"2\\">\\n<li>请参考本人上一篇文章 <em><a href=\\"http://www.fanrenos.com/blog/laravel-chuang-jian-quan-ju-bang-zhu-han-shu\\">Laravel创建全局帮助函数</a></em> 创建好能全局调用的帮助函数，如果不想安照本人的办法，请自行选择，到时只需将文中需要调用函数的部分，换成你自己的函数即可。</li>\\n</ol>\\n<h3>本文以常用的商品图为例（单尺寸图，可以参考本文自行修改，添加一个新的方法即可）</h3>\\n<h4>因为每个人对图片每个尺寸的想法不同，对于多尺寸图片的存储问题也就不同，我这边只介绍我本人的处理方法，对于多尺寸图，我一律以创建<code>100x100</code>文件夹的形式来存储图片，效果如图：</h4>\\n<p><img src=\\"/uploads/markdown/asujykdfbasjryfg.png\\" alt=\\"file\\" /></p>\\n<ol>\\n<li>理解存储路径，下面就开始进行开工了</li>\\n</ol>\\n<ul>\\n<li>因为打算是作为共用类使用，以依赖注入的方式调用它，为了方便，我们首先在app文件夹下新增一个<code>Image</code>文件夹，在此文件夹下，再新建<code>ImageRepository.php</code>文件，当做一个图片处理类，内容如下：</li>\\n</ul>\\n\\n<pre><code>namespace App\\\\Image;\\n\\nuse Response;\\nuse Illuminate\\\\Http\\\\Request;\\nuse File;\\nuse Image;\\nuse Auth;\\n\\nclass ImageRepository{\\n    /**\\n     * [upload description]            生成商品主图\\n     * @param  array  $all_photo       包含的图片集合对象\\n     * @param  [type] $date            存入数据库时，与图片名拼接的路径元素，如（日期/图片名，uid/图片名，等等）\\n     * @param  [type] $upload_path     本地上传图片的路径（不包含日期）\\n     * @param  [type] $ftp_upload_path 阿里云服务器，图片上传的路径（不包含日期）\\n     * @param  [type] $path_size       商品图需要生成的尺寸\\n     * @return [type] Array()          包含图片信息的数组元素\\n     */\\n    public function uploadProduct($all_photo,$date,$upload_path,$ftp_upload_path,$path_size){\\n        $file_info = $this-&gt;uploadProductLoacl($all_photo,$date,$upload_path,$path_size);\\n        //将图片批量上传到服务器\\n        $file_name = $file_info[0];\\n        foreach ($file_name as $key =&gt; $value) {\\n            //批量上传，需要补全服务器的图片上传路径（把日期等信息补全）\\n            uploadcurl($value,$ftp_upload_path.$key.''x''.$key.''/''.$date.''/'');\\n        }\\n\\n        //返回的上传图片信息\\n        $filename_arr = $file_info[1];\\n\\n        return $filename_arr;\\n    }\\n    /**\\n     * 商品主图，本地上传\\n     * @param  [type] $all_photo   [description]\\n     * @param  [type] $date        [description]\\n     * @param  [type] $upload_path [description]\\n     * @param  [type] $path_size   [description]\\n     * @return [type]              用于批量上传及用于存储数据库的图片信息\\n     */\\n    public function uploadProductLoacl($all_photo,$date,$upload_path,$path_size){\\n        $file_name = $filename_arr = array();//用于批量上传的本地图片路径集合//上传完成后返回的图片信息\\n        foreach ($all_photo as $key =&gt; $photo) {\\n            if(empty($photo)){\\n                $filename_arr[] = NULL;\\n            }else{\\n                $originalName = $photo-&gt;getClientOriginalName();\\n                //取得图片的后缀\\n                $pfix = $photo-&gt;getClientOriginalExtension();\\n                $originalNameWithoutExt = substr($originalName, 0, strlen($originalName) - 4);\\n                $filename = sanitize($originalNameWithoutExt);\\n                //自定义图片名称（路径随意选择一个尺寸即可，每个尺寸下的图片名称都是一样的）\\n                $pic_name = createUniqueFilename($upload_path.''800x800/''.$date.''/'',$filename,$pfix);\\n\\n                $filenameExt = $pic_name .''.''.$pfix;\\n\\n                //原图（等上传完毕，会删除此图），最终只会保留3套商品主图\\n                $original_pic = Image::make( $photo )-&gt;save($upload_path.''normal_''.$filenameExt);\\n\\n                $origi_w = $original_pic-&gt;width();\\n                $origi_h = $original_pic-&gt;height();\\n\\n                foreach ($path_size as $k =&gt; $v) {\\n                    $new_w_h = getNewPicWH($k,$k,$origi_w,$origi_h);\\n                    $image = Image::make($original_pic)\\n                            -&gt;resize($new_w_h[0],$new_w_h[1])\\n                            -&gt;save($upload_path.$v.$filenameExt );\\n\\n                    if($image){\\n                        $file_name[$k][] = $upload_path.$v.$filenameExt;//保存每个图片路径，用于图片批量上传到服务器\\n                    }\\n                }\\n                $filename_arr[] = $date.''/''.$filenameExt;//返回的图片信息，用于存入数据库中\\n                //上传成功，删除最开始的原始图\\n                unlink($upload_path.''normal_''.$filenameExt);//删除原始图\\n            }\\n        }\\n        return array($file_name,$filename_arr);\\n    }\\n\\n    /**\\n     * 删除商品主图\\n     * @param  [type] $path      本地路径\\n     * @param  [type] $ftp_path  服务器路径\\n     * @param  [type] $file_info 数据库图片信息string或array（日期/文件名）\\n     * @param  [type] $size      商品图的图片尺寸数组集合array(80,180,...)\\n     * @return [type]            [description]\\n     */\\n    public function deleteProduct($path,$ftp_path, $file_info,$size){\\n        //商品图删除\\n        $del_path = getSqlSizePath($path,$ftp_path,$size,$file_info);\\n        foreach ($del_path[''local''] as $key =&gt; $value) {\\n            if(File::exists($value)){\\n                File::delete($value);\\n            }\\n        }\\n        delpic($del_path[''ftp'']);\\n\\n        return true;\\n    }\\n}\\n</code></pre>\\n\\n<ol start=\\"2\\">\\n<li>目前先写这么多，里面调用的一些函数，会在文章末尾处添加，此类里面有一些上传到远程服务器的代码，如果仅仅是作为本地上传，可以注释掉远程上传的方法，远程服务器的上传函数也会在文章末尾贴出。</li>\\n</ol>\\n<h3>开始使用</h3>\\n<ol>\\n<li>\\n<p>使用命令<code>php artisan make:controller GoodsController</code>新建一个Controller，名称自行修改；</p>\\n</li>\\n<li>\\n<p>举例说明，先设置下配置文件，在config文件夹下新建一个新的文件<code>base_up_imgs.php</code>,内容：</p>\\n</li>\\n</ol>\\n\\n<pre><code>return [\\n    ''base_size_path'' =&gt; base_path(''storage/uploads/''),//上传目录，可以自行修改\\n    ''size'' =&gt; [800,480,180,80],//尺寸大小顺序必须从大到小依次递减（不然图片会失真）\\n];\\n</code></pre>\\n\\n<p><code>GoodsController正文</code></p>\\n\\n<pre><code>//省略其他引用\\nuse App\\\\Image\\\\ImageRepository;\\nuse File;\\nclass GoodsController extends Controller\\n{\\n    public function __construct($path = ''images/product/'', $remote = ''/product/'')\\n    {\\n        $this-&gt;date = date(''Y-m-d'', time());//路径带不带日期可自行考虑，如果不想添加可以注释掉，再修改下ImageRepository类里面对应的参数设置，可以添加个判断\\n        $this-&gt;upload_path = config(''base_up_imgs.base_size_path'') . $path;//本地存储目录\\n        $this-&gt;upload_ftp_path = $remote;//需要远程上传才会用到该参数\\n\\n        $this-&gt;size = config(''base_up_imgs.size'');\\n        $this-&gt;path_size = getSizePath($this-&gt;size,$this-&gt;date);//对尺寸数据的一点处理，方法会在文末贴出\\n    }\\n    \\n    /**\\n     * Store a newly created resource in storage.\\n     * 上传\\n     * @param  \\\\Illuminate\\\\Http\\\\Request $request\\n     * @return \\\\Illuminate\\\\Http\\\\Response\\n     */\\n    public function store(Request $request, ImageRepository $imageRepository)\\n    {\\n        $comment_img = NULL;\\n        if ($request-&gt;hasFile(''upload_images'')) {\\n\\n            checkdir($this-&gt;upload_path, $this-&gt;upload_ftp_path ,$this-&gt;path_size);//检查对应的目录是否存在，否则就创建\\n\\n            $gc_icon_app = $request-&gt;file(''upload_images'');\\n            $com_img = $imageRepository-&gt;uploadProduct($gc_icon_app, $this-&gt;date, $this-&gt;upload_path, $this-&gt;upload_ftp_path,$this-&gt;path_size);\\n            $comment_img = json_encode($com_img, 320);//稍微整理下图片信息\\n        }\\n        dd($comment_img);\\n        //存储数据库操作，此处就不贴出来了，请自行处理\\n    }\\n}\\n</code></pre>\\n\\n<ol start=\\"3\\">\\n<li>使用部分到此就差不多结束了，后面是补充的一些函数方法，有需要的可以看看。</li>\\n</ol>\\n<blockquote>\\n<p>函数部分</p>\\n</blockquote>\\n\\n<pre><code>/**\\n * 检测远程服务器是否存在某目录文件夹\\n * @return [type] [description]\\n */\\nfunction checkftpdir($remote){\\n  header(''content-type:text/html;charset=utf8'');\\n  $curl = curl_init();\\n  $data = array(''path''=&gt;$remote);\\n  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false); // 跳过证书检查\\n  curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);  // 从证书中检查SSL加密算法是否存在，如果不是https服务器，可以注释掉这两行\\n  curl_setopt($curl, CURLOPT_URL, &quot;https://imgs.example.com/checkdir.php&quot;);//checkdir.php文件内容后面会贴出，此文件是放在远程的图片服务器的\\n  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\\n  curl_setopt($curl, CURLOPT_POST, true);\\n  curl_setopt($curl, CURLOPT_POSTFIELDS, $data);\\n  $result = curl_exec($curl);\\n  curl_close($curl);\\n  return $result;\\n}\\n\\n/**\\n * curl批量上传图片文件\\n * @param  [type] $local_files 本地图片集合\\n * @param  [type] $ftp_route   服务器存储路径\\n * @return [type]            [description]\\n */\\nfunction uploadcurl($local_files,$ftp_route){\\n  $ch = curl_init();\\n  $i = array();\\n  foreach ($local_files as $key =&gt; $value) {\\n    $i[] = $key;\\n    if (class_exists(''\\\\CURLFile'')){\\n      $post_data[''ftp_path''.$key] = new \\\\CURLFile($value); //php&gt;5.4\\n    }else{\\n      $post_data[''ftp_path''.$key] = ''@''.$value; //php&lt;=5.4\\n    }\\n  }\\n  $post_data[''i''] = json_encode($i,320);\\n  $post_data[''dir''] = $ftp_route;//服务器路径\\n  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // 跳过证书检查\\n  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);  // 从证书中检查SSL加密算法是否存在\\n  curl_setopt($ch, CURLOPT_HEADER, false);\\n  curl_setopt($ch, CURLOPT_POST, true);\\n  curl_setopt($ch, CURLOPT_BINARYTRANSFER,true);\\n  curl_setopt($ch, CURLOPT_POSTFIELDS,$post_data);\\n  curl_setopt($ch, CURLOPT_URL, ''https://imgs.example.com/uploadcurl.php'');//正式服务器处理上传\\n  //curl_setopt($ch, CURLOPT_INFILESIZE, filesize($file)); //这句非常重要，告诉远程服务器，文件大小\\n  $info= curl_exec($ch);\\n  curl_close($ch);\\n\\n  return $info;\\n}\\n\\n/**\\n * 删除远程服务器上对应的图片\\n * @param  [type] $remote_file [远程服务器上对应的图片路径]\\n * @return [type]              [description]\\n */\\nfunction delpic($del_file){\\n  header(''content-type:text/html;charset=utf8'');\\n  $curl = curl_init();\\n  if(is_array($del_file)){\\n    $data_path = json_encode($del_file);\\n    $is_array = ''array'';\\n  }else{\\n    $data_path = $del_file;\\n    $is_array = ''string'';\\n  }\\n\\n  $data = array(''path''=&gt;$data_path,''is_array''=&gt;$is_array);\\n  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false); // 跳过证书检查\\n  curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);  // 从证书中检查SSL加密算法是否存在\\n  curl_setopt($curl, CURLOPT_URL, &quot;https://imgs.example.com/delpic.php&quot;);\\n  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\\n  curl_setopt($curl, CURLOPT_POST, true);\\n  curl_setopt($curl, CURLOPT_POSTFIELDS, $data);\\n  $result = curl_exec($curl);\\n  curl_close($curl);\\n  return $result;\\n}\\n\\n/**\\n * 自定义图片名称\\n * @param  [type] $filename [description]\\n * @param  [type] $pfix     [description]\\n * @return [type]           [description]\\n */\\nfunction createUniqueFilename( $path,$filename,$pfix)\\n{\\n    //自定义图片名称\\n    $str = $filename.mt_rand(100000,999999);\\n    $pic_name = mb_substr(md5($str),0,12);\\n\\n    $full_image_path = $path . $pic_name .''.''. $pfix;\\n\\n    if ( File::exists( $full_image_path ) )\\n    {\\n        // Generate token for image\\n        $imageToken = substr(sha1(mt_rand()), 0, 5);\\n        return $pic_name . ''-'' . $imageToken;\\n    }\\n\\n    return $pic_name;\\n}\\n\\n/**\\n * 检查本地及阿里服务器路径是否存在，否则就创建\\n * @param  [type] $path     [description]\\n * @param  [type] $ftp_path [description]\\n * @param  [type] $path_size 图片尺寸集合\\n * @return [type]           [description]\\n */\\nfunction checkdir($path,$ftp_path,$path_size=array()){\\n  if(!empty($path_size)){\\n    foreach ($path_size as $key =&gt; $size) {\\n        if(!is_dir($path.$size)){\\n                @mkdir($path.$size,0777);\\n        }\\n        checkftpdir($ftp_path.$size);\\n    }\\n  }else{\\n        if(!is_dir($path)){\\n                @mkdir($path,0777);\\n        }\\n        checkftpdir($ftp_path);\\n    }\\n}\\n\\n/**\\n * 根据图片尺寸获取商品主图链接（用于新建文件夹及上传图片）\\n * @param  [type] $size [description]\\n * @param  [type] $date [description]\\n * @return [type]       [description]\\n */\\nfunction getSizePath($size,$date){\\n    $size_path = array();\\n    foreach ($size as $key =&gt; $value) {\\n        $size_path[$value] = $value.''x''.$value.''/''.$date.''/'';\\n    }\\n    return $size_path;\\n}\\n\\n/**\\n * 根据尺寸，获取商品主图正确路径(用于删除)\\n * @param  [type] $path     [description]\\n * @param  [type] $ftp_path [description]\\n * @param  [type] $size     [description]\\n * @param  [type] $pic_info [description]\\n * @return [type]           [description]\\n */\\nfunction getSqlSizePath($path,$ftp_path,$size,$pic_info){\\n    $new_path = array();\\n    if(is_array($pic_info)){\\n        foreach ($size as $key =&gt; $value) {\\n            foreach ($pic_info as $k =&gt; $v) {\\n                $new_path[''local''][] = $path.$value.''x''.$value.''/''.$v;\\n                $new_path[''ftp''][] = $ftp_path.$value.''x''.$value.''/''.$v;\\n            }\\n        }\\n    }else{\\n        foreach ($size as $key =&gt; $value) {\\n            $new_path[''local''][] = $path.$value.''x''.$value.''/''.$pic_info;\\n            $new_path[''ftp''][] = $ftp_path.$value.''x''.$value.''/''.$pic_info;\\n        }\\n    }\\n    return $new_path;\\n}\\n\\n/**\\n * 获取最适合的图片宽高\\n * @param  [type] $maxwidth   [图片最大宽]\\n * @param  [type] $maxheight  [图片最大高]\\n * @param  [type] $pic_width  [图片实际宽]\\n * @param  [type] $pic_height [图片实际高]\\n * @return [type] array()     [返回最新最合适的图片宽高]\\n */\\nfunction getNewPicWH($maxwidth,$maxheight,$pic_width,$pic_height){\\n  $resizewidth_tag = false;\\n  $resizeheight_tag = false;\\n  if($maxwidth &amp;&amp; $pic_width&gt;$maxwidth)\\n  {\\n    $widthratio = $maxwidth/$pic_width;\\n    $resizewidth_tag = true;\\n  }\\n\\n  if($maxheight &amp;&amp; $pic_height&gt;$maxheight)\\n  {\\n    $heightratio = $maxheight/$pic_height;\\n    $resizeheight_tag = true;\\n  }\\n\\n  if($resizewidth_tag &amp;&amp; $resizeheight_tag)\\n  {\\n    if($widthratio&lt;$heightratio){\\n      $ratio = $widthratio;\\n    }else{\\n      $ratio = $heightratio;\\n    }\\n  }\\n\\n  if($resizewidth_tag &amp;&amp; !$resizeheight_tag){\\n    $ratio = $widthratio;\\n  }\\n  if($resizeheight_tag &amp;&amp; !$resizewidth_tag){\\n    $ratio = $heightratio;\\n  }\\n  if(!$resizeheight_tag &amp;&amp; !$resizewidth_tag){\\n    $ratio = 1;\\n  }\\n\\n  $newwidth = $pic_width * $ratio;\\n  $newheight = $pic_height * $ratio;\\n\\n  return array($newwidth,$newheight);\\n}\\n\\n/**\\n * 名称过滤\\n * @param  [type]  $string          [description]\\n * @param  boolean $force_lowercase [description]\\n * @param  boolean $anal            [description]\\n * @return [type]                   [description]\\n */\\nfunction sanitize($string, $force_lowercase = true, $anal = false)\\n{\\n    $strip = array(&quot;~&quot;, &quot;`&quot;, &quot;!&quot;, &quot;@&quot;, &quot;#&quot;, &quot;$&quot;, &quot;%&quot;, &quot;^&quot;, &quot;&amp;&quot;, &quot;*&quot;, &quot;(&quot;, &quot;)&quot;, &quot;_&quot;, &quot;=&quot;, &quot;+&quot;, &quot;[&quot;, &quot;{&quot;, &quot;]&quot;,\\n        &quot;}&quot;, &quot;\\\\\\\\&quot;, &quot;|&quot;, &quot;;&quot;, &quot;:&quot;, &quot;\\\\&quot;&quot;, &quot;''&quot;, &quot;‘&quot;, &quot;’&quot;, &quot;“&quot;, &quot;”&quot;, &quot;–&quot;, &quot;—&quot;,\\n        &quot;â€”&quot;, &quot;â€“&quot;, &quot;,&quot;, &quot;&lt;&quot;, &quot;.&quot;, &quot;&gt;&quot;, &quot;/&quot;, &quot;?&quot;);\\n    $clean = trim(str_replace($strip, &quot;&quot;, strip_tags($string)));\\n    $clean = preg_replace(''/\\\\s+/'', &quot;-&quot;, $clean);\\n    $clean = ($anal) ? preg_replace(&quot;/[^a-zA-Z0-9]/&quot;, &quot;&quot;, $clean) : $clean ;\\n\\n    return ($force_lowercase) ?\\n        (function_exists(''mb_strtolower'')) ?\\n            mb_strtolower($clean, ''UTF-8'') :\\n            strtolower($clean) :\\n        $clean;\\n}\\n</code></pre>\\n\\n<h4>涉及到的远程服务器的3个文件<code>checkdir.php</code>、<code>delpic.php</code>以及<code>uploadcurl.php</code>的内容分别为：</h4>\\n\\n<pre><code>if($_REQUEST) \\n{   \\n    $path = dirname(__FILE__).$_REQUEST[''path''];\\n    if(is_dir($path)===false){\\n        @mkdir($path,0777);\\n    }\\n}\\n</code></pre>\\n\\n\\n<pre><code>if($_REQUEST) \\n{   \\n    $path = $_REQUEST[''path''];\\n    $is_array = $_REQUEST[''is_array''];\\n    if($is_array==''array''){\\n        $del_path = json_decode($path,true);\\n        foreach ($del_path as $key =&gt; $value) {\\n            $dir = dirname(__FILE__).$value;\\n            if(file_exists($dir)){\\n                unlink($dir);\\n            }\\n        }\\n    }else if($is_array==''string''){\\n        $dir = dirname(__FILE__).$path;\\n        if(file_exists($dir)){\\n          unlink($dir);\\n        }\\n    }\\n    \\n}\\n</code></pre>\\n\\n\\n<pre><code>if($_FILES){\\n    \\n    $path = dirname(__FILE__).$_REQUEST[''dir''];\\n    $i = json_decode($_REQUEST[''i''],true);\\n\\n    if(is_dir($path)===false){\\n        @mkdir($path,0777);\\n    }\\n    foreach ($i as $key =&gt; $value) {\\n        $filename = $_FILES[''ftp_path''.$value][''name''];\\n        $tmpname = $_FILES[''ftp_path''.$value][''tmp_name''];\\n        move_uploaded_file($tmpname,$path.$filename);\\n    }\\n}\\n</code></pre>\\n\\n<p><code>End</code></p>\\n"}', '', 'Laravel图片上传类，专门用于上传图片的类', 1, 0, 0, '2017-09-02 08:00:00', '2017-09-02 08:36:26', '2017-09-02 08:43:33', NULL);

-- --------------------------------------------------------

--
-- 表的结构 `article_tag_pivot`
--

CREATE TABLE `article_tag_pivot` (
  `id` int(10) UNSIGNED NOT NULL,
  `article_id` int(10) UNSIGNED NOT NULL,
  `tag_id` int(10) UNSIGNED NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- 转存表中的数据 `article_tag_pivot`
--

INSERT INTO `article_tag_pivot` (`id`, `article_id`, `tag_id`) VALUES
(2, 1, 1),
(6, 2, 1),
(7, 2, 2),
(8, 1, 2),
(9, 11, 3),
(10, 11, 4),
(11, 11, 6),
(12, 1, 7),
(13, 12, 1),
(14, 12, 2),
(15, 13, 1),
(16, 13, 2),
(17, 13, 6),
(18, 14, 1),
(19, 14, 2),
(20, 15, 1),
(21, 15, 2);

-- --------------------------------------------------------

--
-- 表的结构 `categories`
--

CREATE TABLE `categories` (
  `id` int(10) UNSIGNED NOT NULL,
  `parent_id` tinyint(3) UNSIGNED NOT NULL DEFAULT '0',
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `path` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `description` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `image_url` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- 转存表中的数据 `categories`
--

INSERT INTO `categories` (`id`, `parent_id`, `name`, `path`, `description`, `image_url`, `created_at`, `updated_at`) VALUES
(1, 0, 'Dr. Clifford Herman MD', 'http://kessler.info/quia-enim-omnis-molestiae-voluptate', NULL, NULL, '2017-05-25 05:28:59', '2017-05-25 05:28:59'),
(2, 0, 'Miss Kyla Yundt', 'http://www.schroeder.net/', NULL, NULL, '2017-05-25 05:28:59', '2017-05-25 05:28:59'),
(3, 0, 'Tyler Muller', 'http://deckow.info/ullam-ut-tempore-omnis.html', NULL, NULL, '2017-05-25 05:28:59', '2017-05-25 05:28:59'),
(4, 0, 'Dr. Napoleon Abshire', 'http://www.beatty.org/illum-sunt-ipsum-ipsa-sit-molestiae-rerum.html', NULL, NULL, '2017-05-25 05:28:59', '2017-05-25 05:28:59'),
(5, 0, 'Tristian Metz', 'http://greenfelder.biz/perferendis-possimus-et-aliquam-illo-molestiae-nihil-voluptate.html', NULL, NULL, '2017-05-25 05:28:59', '2017-05-25 05:28:59'),
(6, 0, 'Sheila Wilkinson', 'http://www.huel.com/nostrum-doloremque-et-sint-distinctio-sint.html', NULL, NULL, '2017-05-25 05:28:59', '2017-05-25 05:28:59'),
(7, 0, 'Marjorie Prohaska', 'http://gleason.com/debitis-aliquid-ducimus-alias-perferendis-eos.html', NULL, NULL, '2017-05-25 05:28:59', '2017-05-25 05:28:59'),
(8, 0, 'Jefferey O''Connell', 'https://www.mann.com/dolores-doloremque-facilis-repellendus-sed-enim-esse-sit-qui', NULL, NULL, '2017-05-25 05:28:59', '2017-05-25 05:28:59'),
(9, 0, 'Donna Daugherty', 'http://west.com/sit-et-enim-quibusdam-placeat-consequatur', NULL, NULL, '2017-05-25 05:29:00', '2017-05-25 05:29:00'),
(10, 0, 'Dr. Darwin Stark Jr.', 'http://www.crist.com/', NULL, NULL, '2017-05-25 05:29:00', '2017-05-25 05:29:00');

-- --------------------------------------------------------

--
-- 表的结构 `comments`
--

CREATE TABLE `comments` (
  `id` int(10) UNSIGNED NOT NULL,
  `user_id` int(10) UNSIGNED NOT NULL,
  `commentable_id` int(10) UNSIGNED NOT NULL COMMENT '文章id',
  `commentable_type` char(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `is_reply_author` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '是否有回复人（主要用于后台编辑）',
  `reply_author_name` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '回复人name',
  `content` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- 转存表中的数据 `comments`
--

INSERT INTO `comments` (`id`, `user_id`, `commentable_id`, `commentable_type`, `is_reply_author`, `reply_author_name`, `content`, `created_at`, `updated_at`, `deleted_at`) VALUES
(2, 13, 14, 'articles', NULL, NULL, '{"raw":"请问下，这段代码是干嘛用的？\\r\\n\\r\\n<code>\\r\\n\\r\\n    $products = db::table(''trs_products as pr'')\\r\\n        ->leftjoin(''trs_product_sku as sku'',''pr.product_id'',''='',''sku.sku_product_id'')\\r\\n        ->selectraw(''pr.*,sku.sku_price,sku.sku_stock,''.$***l)\\r\\n        ->whereraw($query_sku.'' and ''.$query)\\r\\n        ->wherenull(''deleted_at'')\\r\\n        ->orderby(''last_price'',''desc'')->paginate(15);\\r\\n\\r\\n</code>\\r\\n\\r\\n帮忙解释下！","html":"<p>请问下，这段代码是干嘛用的？</p>\\n\\n<pre><code>$products = db::table(''trs_products as pr'')\\n    -&gt;leftjoin(''trs_product_sku as sku'',''pr.product_id'',''='',''sku.sku_product_id'')\\n    -&gt;selectraw(''pr.*,sku.sku_price,sku.sku_stock,''.$***l)\\n    -&gt;whereraw($query_sku.'' and ''.$query)\\n    -&gt;wherenull(''deleted_at'')\\n    -&gt;orderby(''last_price'',''desc'')-&gt;paginate(15);\\n</code></pre>\\n\\n<p>帮忙解释下！</p>\\n"}', '2017-09-07 12:54:53', '2017-09-07 12:54:53', NULL),
(3, 13, 14, 'articles', NULL, NULL, '{"raw":"这个是SQL语句么？感觉好复杂啊\\r\\n\\r\\n<code>\\r\\n\\r\\n    function setSkuSql($date){\\r\\n        $sql = ''IF(!ISNULL(sku.sku_start_time) AND !ISNULL(sku.sku_end_time),IF(sku.sku_start_time<''.$date.'' AND sku.sku_end_time>''.$date.'',IF(!ISNULL(sku.sku_sell_activity_price),sku.sku_sell_activity_price,sku.sku_sell_price),sku.sku_sell_price),sku.sku_sell_price) AS last_price'';\\r\\n        return $sql;\\r\\n    }\\r\\n\\r\\n</code>\\r\\n\\r\\n看看laravel会不会被ping bi了。","html":"<p>这个是SQL语句么？感觉好复杂啊</p>\\n\\n<pre><code>function setSkuSql($date){\\n    $sql = ''IF(!ISNULL(sku.sku_start_time) AND !ISNULL(sku.sku_end_time),IF(sku.sku_start_time&lt;''.$date.'' AND sku.sku_end_time&gt;''.$date.'',IF(!ISNULL(sku.sku_sell_activity_price),sku.sku_sell_activity_price,sku.sku_sell_price),sku.sku_sell_price),sku.sku_sell_price) AS last_price'';\\n    return $sql;\\n}\\n</code></pre>\\n\\n<p>看看laravel会不会被ping bi了。</p>\\n"}', '2017-09-07 13:07:09', '2017-09-08 04:46:17', NULL),
(4, 13, 14, 'articles', NULL, NULL, '{"raw":"再试下laravel的ping bi 问题","html":"<p>再试下laravel的ping bi 问题</p>\\n"}', '2017-09-07 13:13:10', '2017-09-07 13:13:10', NULL),
(5, 13, 14, 'articles', '@FanRen', NULL, '{"raw":"<a href=\\"#link-to-user\\">@FanRen  </a>已经帮你重新设置了下，看看会不会把代码弄没了，再看下","html":"<p><a href=\\"#link-to-user\\">@FanRen </a>  已经帮你重新设置了下，看看会不会把代码弄没了，再看下</p>\\n"}', '2017-09-08 04:46:56', '2017-09-08 05:14:55', NULL),
(6, 13, 13, 'articles', '', NULL, '{"raw":"正在找相关的教程，感谢站长！","html":"<p>正在找相关的教程，感谢站长！</p>\\n"}', '2017-09-09 20:14:56', '2017-09-09 20:14:56', NULL),
(7, 13, 12, 'articles', '', NULL, '{"raw":"站长就是用这个类进行文章链接的吧","html":"<p>站长就是用这个类进行文章链接的吧</p>\\n"}', '2017-09-10 03:23:55', '2017-09-10 04:36:44', '2017-09-10 04:36:44'),
(8, 1, 12, 'articles', '@青石', NULL, '{"raw":"<a href=\\"http://localhost/fanrenos/public/user/Mostanily\\">@青石  </a>是的了，感谢关注，有需要的话就拿去用！","html":"<p>@青石  是的了，感谢关注，有需要的话就拿去用！</p>\\n"}', '2017-09-10 03:33:17', '2017-09-10 03:34:09', '2017-09-10 03:34:09'),
(9, 1, 12, 'articles', '@青石', NULL, '{"raw":"<a href=\\"http://localhost/fanrenos/public/user/Mostanily\\">@青石  </a> 是的了，感谢关注，有需要的话就拿去用！","html":"<p>@青石   是的了，感谢关注，有需要的话就拿去用！</p>\\n"}', '2017-09-10 03:35:22', '2017-09-10 03:37:34', '2017-09-10 03:37:34'),
(10, 1, 12, 'articles', '@青石', NULL, '{"raw":"<a href=\\"http://localhost/fanrenos/public/user/Mostanily\\">@青石  </a>是的了，感谢关注，有需要的话就拿去用！","html":"<p><a href=\\"http://localhost/fanrenos/public/user/Mostanily\\">@青石 </a>  是的了，感谢关注，有需要的话就拿去用！</p>\\n"}', '2017-09-10 03:42:59', '2017-09-10 03:58:11', '2017-09-10 03:58:11'),
(11, 1, 12, 'articles', '@青石', 'FanRen', '{"raw":"<a href=\\"http://localhost/fanrenos/public/user/Mostanily\\">@青石  </a>感谢关注，有需要的话就拿去用！效果","html":"<p><a href=\\"http://localhost/fanrenos/public/user/FanRen\\">@青石 </a>  感谢关注，有需要的话就拿去用！效果</p>\\n"}', '2017-09-10 03:56:21', '2017-09-10 03:56:21', NULL),
(12, 1, 12, 'articles', '@青石', 'FanRen', '{"raw":"<a href=\\"http://localhost/fanrenos/public/user/Mostanily\\">@青石  </a>还望多多推荐，加个友链呗","html":"<p><a href=\\"http://localhost/fanrenos/public/user/FanRen\\">@青石 </a>  还望多多推荐，加个友链呗</p>\\n"}', '2017-09-10 04:00:11', '2017-09-10 04:00:11', NULL);

-- --------------------------------------------------------

--
-- 表的结构 `comment_thumb`
--

CREATE TABLE `comment_thumb` (
  `id` int(1) UNSIGNED NOT NULL,
  `user_id` int(1) NOT NULL COMMENT '用户id',
  `comment_id` int(1) NOT NULL COMMENT '评论id',
  `status` tinyint(1) NOT NULL COMMENT '用户点赞的行为（0：不喜欢，1：喜欢）'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `comment_thumb`
--

INSERT INTO `comment_thumb` (`id`, `user_id`, `comment_id`, `status`) VALUES
(10, 13, 8, 1),
(14, 13, 2, 1),
(15, 13, 1, 1),
(17, 13, 12, 1),
(18, 13, 11, 1);

-- --------------------------------------------------------

--
-- 表的结构 `experience`
--

CREATE TABLE `experience` (
  `id` int(1) UNSIGNED NOT NULL,
  `title` varchar(100) NOT NULL,
  `year` varchar(30) NOT NULL,
  `content_raw` text NOT NULL,
  `content_html` text NOT NULL,
  `icon` varchar(30) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- 表的结构 `followers`
--

CREATE TABLE `followers` (
  `id` int(10) UNSIGNED NOT NULL,
  `user_id` int(10) UNSIGNED NOT NULL,
  `follow_id` int(10) UNSIGNED NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- 转存表中的数据 `followers`
--

INSERT INTO `followers` (`id`, `user_id`, `follow_id`, `created_at`, `updated_at`) VALUES
(5, 1, 13, '2017-09-10 04:02:45', '2017-09-10 04:02:45');

-- --------------------------------------------------------

--
-- 表的结构 `links`
--

CREATE TABLE `links` (
  `id` int(10) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `link` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `image` text COLLATE utf8mb4_unicode_ci,
  `status` tinyint(1) NOT NULL DEFAULT '1',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- 转存表中的数据 `links`
--

INSERT INTO `links` (`id`, `name`, `link`, `image`, `status`, `created_at`, `updated_at`, `deleted_at`) VALUES
(1, 'Orval Zemlak', 'http://rowe.biz/nemo-ut-sunt-rerum-perspiciatis-enim-nihil', 'http://lorempixel.com/640/480/?67666', 1, '2017-05-25 05:29:07', '2017-05-25 05:29:07', NULL),
(2, 'Alana Jacobson IV', 'http://gusikowski.com/sed-enim-saepe-facere-fugiat-error-occaecati', 'http://lorempixel.com/640/480/?64771', 1, '2017-05-25 05:29:07', '2017-05-25 05:29:07', NULL),
(3, 'Frank Lakin', 'https://friesen.com/qui-suscipit-velit-delectus-aut.html', 'http://lorempixel.com/640/480/?87057', 1, '2017-05-25 05:29:07', '2017-05-25 05:29:07', NULL),
(4, 'Hertha Veum', 'http://haley.net/cupiditate-officiis-voluptates-quia-quaerat.html', 'http://lorempixel.com/640/480/?45424', 1, '2017-05-25 05:29:07', '2017-05-25 05:29:07', NULL),
(5, 'Anibal Bruen', 'http://waters.com/magnam-id-nesciunt-sit-quia-id', 'http://lorempixel.com/640/480/?96657', 1, '2017-05-25 05:29:07', '2017-05-25 05:29:07', NULL),
(6, 'Simeon Stoltenberg', 'http://renner.com/placeat-tempora-voluptates-ipsam-autem.html', 'http://lorempixel.com/640/480/?23083', 1, '2017-05-25 05:29:07', '2017-05-25 05:29:07', NULL),
(7, 'Mrs. Joana Block II', 'http://www.dicki.com/sit-ea-quia-ratione-voluptatibus-veritatis-sed', 'http://lorempixel.com/640/480/?53430', 1, '2017-05-25 05:29:07', '2017-05-25 05:29:07', NULL),
(8, 'Nyah Zboncak', 'http://barrows.org/', 'http://lorempixel.com/640/480/?71063', 1, '2017-05-25 05:29:07', '2017-05-25 05:29:07', NULL),
(9, 'Annabell Stamm DDS', 'http://schmeler.com/', 'http://lorempixel.com/640/480/?45131', 1, '2017-05-25 05:29:07', '2017-05-25 05:29:07', NULL),
(10, 'Jarred Jenkins I', 'http://www.collier.com/et-voluptatum-sint-deserunt-praesentium-ipsa-natus.html', 'http://lorempixel.com/640/480/?17054', 1, '2017-05-25 05:29:07', '2017-05-25 05:29:07', NULL);

-- --------------------------------------------------------

--
-- 表的结构 `migrations`
--

CREATE TABLE `migrations` (
  `migration` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `batch` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- 转存表中的数据 `migrations`
--

INSERT INTO `migrations` (`migration`, `batch`) VALUES
('2014_10_12_000000_create_users_table', 1),
('2014_10_12_100000_create_password_resets_table', 1),
('2017_08_13_055659_create_admins_table', 2);

-- --------------------------------------------------------

--
-- 表的结构 `notifications`
--

CREATE TABLE `notifications` (
  `id` char(36) COLLATE utf8mb4_unicode_ci NOT NULL,
  `type` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `notifiable_id` int(10) UNSIGNED NOT NULL,
  `notifiable_type` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `data` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `read_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- 转存表中的数据 `notifications`
--

INSERT INTO `notifications` (`id`, `type`, `notifiable_id`, `notifiable_type`, `data`, `read_at`, `created_at`, `updated_at`) VALUES
('0e1aba87-c7d3-4334-85fc-374174b5b57a', 'App\\Notifications\\FollowedUser', 1, 'App\\User', '{"id":13,"name":"FanRen","nickname":null,"avatar":null,"email":"test@test.com","occupation":null,"address":null,"company":null,"status":1,"github_id":null,"github_name":null,"github_url":null,"weibo_name":null,"weibo_link":null,"website":null,"qq":null,"description":null,"email_notify_enabled":"yes","created_at":"2017-09-05 17:10:16","deleted_at":null}', NULL, '2017-09-09 18:46:09', '2017-09-09 18:46:09');

-- --------------------------------------------------------

--
-- 表的结构 `password_resets`
--

CREATE TABLE `password_resets` (
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `token` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- 表的结构 `tags`
--

CREATE TABLE `tags` (
  `id` int(10) UNSIGNED NOT NULL,
  `tag` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `title` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `meta_description` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- 转存表中的数据 `tags`
--

INSERT INTO `tags` (`id`, `tag`, `title`, `meta_description`, `created_at`, `updated_at`, `deleted_at`) VALUES
(1, 'Laravel', 'Laravel框架', 'Laravel框架标签', '2017-08-29 13:43:39', '2017-08-29 13:43:39', NULL),
(2, 'PHP', 'PHP标签', '关于PHP相关的博客', '2017-08-29 13:45:32', '2017-08-29 13:45:32', NULL),
(3, '小说', '小说文章', '原创小说', '2017-08-29 13:48:28', '2017-08-29 16:04:36', NULL),
(4, '二次元', '二次元世界', '各种二次元信息，动漫、影视、小说。。。', '2017-08-29 18:01:05', '2017-08-29 18:01:05', NULL),
(5, '支付', '各种支付手段', '国内常用支付手段，微信，支付宝等', '2017-08-29 18:02:52', '2017-08-29 18:02:52', NULL),
(6, '第三方登陆', '社交化登陆', '国内外各种第三方平台账号登陆授权方案', '2017-08-29 18:03:42', '2017-08-29 18:03:42', NULL),
(7, 'Mysql', 'MySQL数据库', 'MySQL数据库方面的一些说明', '2017-08-31 06:07:13', '2017-08-31 06:07:13', NULL),
(8, '国产动漫', '国产二次元', '国内二次元世界', '2017-08-31 06:08:18', '2017-08-31 06:08:18', NULL),
(9, 'Sublime Text', 'Sublime Text开发工具', 'Sublime Text开发工具的一些常用插件', '2017-08-31 06:09:21', '2017-08-31 06:09:21', NULL),
(10, '电影', '好看的电影', '一些好看的电影推荐', '2017-08-31 06:10:20', '2017-08-31 06:10:20', NULL),
(11, 'Bilibili', 'Bilibili弹幕网', '看弹幕网站，没错的', '2017-08-31 06:11:21', '2017-08-31 06:11:21', NULL);

-- --------------------------------------------------------

--
-- 表的结构 `users`
--

CREATE TABLE `users` (
  `id` int(10) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `nickname` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `avatar` text COLLATE utf8mb4_unicode_ci,
  `email` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `confirm_code` varchar(64) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `occupation` varchar(64) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '职业',
  `address` varchar(200) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '地址',
  `company` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '公司',
  `status` tinyint(4) NOT NULL DEFAULT '0' COMMENT '账号状态1：正常，0：删除/关闭',
  `password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `github_id` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `github_name` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `github_url` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `weibo_name` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `weibo_link` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `website` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `qq` int(1) DEFAULT NULL COMMENT 'QQ号码',
  `description` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `email_notify_enabled` enum('yes','no') COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'yes',
  `remember_token` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- 转存表中的数据 `users`
--

INSERT INTO `users` (`id`, `name`, `nickname`, `avatar`, `email`, `confirm_code`, `occupation`, `address`, `company`, `status`, `password`, `github_id`, `github_name`, `github_url`, `weibo_name`, `weibo_link`, `website`, `qq`, `description`, `email_notify_enabled`, `remember_token`, `created_at`, `updated_at`, `deleted_at`) VALUES
(1, 'Mostanily', '凡人OS', '79709d10581b.png', 'fanren@admin.com', 'mOGnWjAE2gBaEMVpRHFKlUSJrQpRQCVoWWvbkDbSPU9jJGaV5HpDgaItI59qsR5f', '拍黄片', '四川/成都', '百度', 1, '$2y$10$DliceL/g4ttL9k1HPtiOUOB0GbeZtC4EcRyMETts3Ahs.mlyaW.p6', NULL, 'mostanily', NULL, '凡人', NULL, 'http://www.fanrenos.com', 153416851, '小小凡人一枚', 'yes', '66LYyEXhHX9qPVoqcfJPlrbluJH8jys00KbeGk7pgwOOjCDr2oxN6n4SkSe5', '2017-05-25 05:28:58', '2017-09-11 13:52:59', NULL),
(13, 'FanRen', '青石', NULL, 'test@test.com', '5W1y8QfTHi0ygvztxrgFs7hsgdAX4qObywU59LGugkEwYoCLwWvANqLuNTP6H0YA', 'PHPer', '上海', '阿里', 1, '$2y$10$fFPF4aZlFWQ6zwGXpJReRuoaaLRWYMDLoHUsdtCsTSWfmNEx1polC', NULL, 'fanren', NULL, '', '', 'http://www.fanren.com', 2147483647, '不轻易信任任何一个人！', 'yes', '0xaZya53OnNq8jievD4JJhUQt9cGTl5yGw7zt6v7L6q5gKf9oyea9wiUt3HI', '2017-09-05 09:10:16', '2017-09-10 08:39:48', NULL);

--
-- Indexes for dumped tables
--

--
-- Indexes for table `admins`
--
ALTER TABLE `admins`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `admins_email_unique` (`email`);

--
-- Indexes for table `articles`
--
ALTER TABLE `articles`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `article_tag_pivot`
--
ALTER TABLE `article_tag_pivot`
  ADD PRIMARY KEY (`id`),
  ADD KEY `article_tag_pivot_article_id_index` (`article_id`),
  ADD KEY `article_tag_pivot_tag_id_index` (`tag_id`);

--
-- Indexes for table `categories`
--
ALTER TABLE `categories`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `comments`
--
ALTER TABLE `comments`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `comment_thumb`
--
ALTER TABLE `comment_thumb`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `experience`
--
ALTER TABLE `experience`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `followers`
--
ALTER TABLE `followers`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `links`
--
ALTER TABLE `links`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `password_resets`
--
ALTER TABLE `password_resets`
  ADD KEY `password_resets_email_index` (`email`),
  ADD KEY `password_resets_token_index` (`token`);

--
-- Indexes for table `tags`
--
ALTER TABLE `tags`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`);

--
-- 在导出的表使用AUTO_INCREMENT
--

--
-- 使用表AUTO_INCREMENT `admins`
--
ALTER TABLE `admins`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;
--
-- 使用表AUTO_INCREMENT `articles`
--
ALTER TABLE `articles`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=16;
--
-- 使用表AUTO_INCREMENT `article_tag_pivot`
--
ALTER TABLE `article_tag_pivot`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=22;
--
-- 使用表AUTO_INCREMENT `categories`
--
ALTER TABLE `categories`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;
--
-- 使用表AUTO_INCREMENT `comments`
--
ALTER TABLE `comments`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=13;
--
-- 使用表AUTO_INCREMENT `comment_thumb`
--
ALTER TABLE `comment_thumb`
  MODIFY `id` int(1) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=19;
--
-- 使用表AUTO_INCREMENT `experience`
--
ALTER TABLE `experience`
  MODIFY `id` int(1) UNSIGNED NOT NULL AUTO_INCREMENT;
--
-- 使用表AUTO_INCREMENT `followers`
--
ALTER TABLE `followers`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=6;
--
-- 使用表AUTO_INCREMENT `links`
--
ALTER TABLE `links`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;
--
-- 使用表AUTO_INCREMENT `tags`
--
ALTER TABLE `tags`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=12;
--
-- 使用表AUTO_INCREMENT `users`
--
ALTER TABLE `users`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=14;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
